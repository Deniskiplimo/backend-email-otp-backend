{
  "swagger": "2.0",
  "info": {
    "title": "Auth Verification API",
    "version": "1.0.0",
    "description": "API for user registration, login, password reset, and OTP verification"
  },
  "host": "localhost:3000",

  "tags": [
    {
      "name": "Authentication",
      "description": "API for user registration, login, and password reset"
    }
  ],
  "paths": {
    "/api/get-location": {
      "get": {
        "tags": ["User"],
        "summary": "Get geolocation of an IP address",
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "description": "IP address to lookup (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with location data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "ip": {
                      "type": "string"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "city": { "type": "string" },
                        "region": { "type": "string" },
                        "country": { "type": "string" },
                        "latitude": { "type": "number" },
                        "longitude": { "type": "number" },
                        "postal": { "type": "string" },
                        "timezone": { "type": "string" },
                        "continent": { "type": "string" },
                        "country_code": { "type": "string" },
                        "country_flag": { "type": "string" }
                      }
                    },
                    "org": { "type": "string" },
                    "is_anycast": { "type": "boolean" },
                    "is_mobile": { "type": "boolean" },
                    "is_anonymous": { "type": "boolean" },
                    "is_satellite": { "type": "boolean" },
                    "asn": { "type": "string" },
                    "company": { "type": "string" },
                    "privacy": {
                      "type": "object",
                      "properties": {
                        "vpn": { "type": "boolean" },
                        "proxy": { "type": "boolean" },
                        "tor": { "type": "boolean" },
                        "relay": { "type": "boolean" },
                        "hosting": { "type": "boolean" }
                      }
                    },
                    "abuse": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid IP address"
          },
          "404": {
            "description": "Location data not found for IP"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/calculate-distance": {
      "get": {
        "tags": ["User"],
        "summary": "Calculate the distance between two geographic points",
        "parameters": [
          {
            "name": "lat1",
            "in": "query",
            "description": "Latitude of the first point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "lon1",
            "in": "query",
            "description": "Longitude of the first point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "lat2",
            "in": "query",
            "description": "Latitude of the second point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "lon2",
            "in": "query",
            "description": "Longitude of the second point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Distance calculation and other details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "distance": {
                      "type": "object",
                      "properties": {
                        "meters": { "type": "number" },
                        "kilometers": { "type": "number" },
                        "miles": { "type": "number" },
                        "nautical_miles": { "type": "number" }
                      }
                    },
                    "midpoint": {
                      "type": "object",
                      "properties": {
                        "latitude": { "type": "number" },
                        "longitude": { "type": "number" }
                      }
                    },
                    "bearing": { "type": "number" },
                    "details": {
                      "type": "object",
                      "properties": {
                        "origin": { "type": "object", "properties": { "latitude": { "type": "number" }, "longitude": { "type": "number" } } },
                        "destination": { "type": "object", "properties": { "latitude": { "type": "number" }, "longitude": { "type": "number" } } },
                        "message": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid coordinates"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["User"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string", "description": "User's username" },
                "email": { "type": "string", "description": "User's email" },
                "password": { "type": "string", "description": "User's password" }
              },
              "required": ["username", "email", "password" ],
              "example": {
                "username": "johndoe2",
                "email": "johndoe2@example.com",
                "password": "mysecurepassword"
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Bad request" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/login": {
      "post": {
        "summary": "Login a user",
        "tags": ["User"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "usernameOrEmail": { "type": "string", "description": "Username or email" },
                "password": { "type": "string", "description": "Password" }
              },
              "required": ["usernameOrEmail", "password"],
              "example": {
                "usernameOrEmail": "johndoe2",
                "password": "mysecurepassword"
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Login successful" },
          "400": { "description": "Bad request" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  ,
    "/api/me": {
      "get": {
        "summary": "Get logged-in user info",
        "tags": ["User"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": { "description": "User info retrieved" },
          "401": { "description": "Access token required" },
          "403": { "description": "Invalid or expired token" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/api/logout": {
      "post": {
        "summary": "Log out a user",
        "tags": ["User"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "refreshToken": { "type": "string", "description": "Refresh token" }
              },
              "required": ["refreshToken"]
            }
          }
        ],
        "responses": {
          "200": { "description": "User logged out successfully" },
          "400": { "description": "Refresh token is required or invalid" },
          "500": { "description": "Error logging out" }
        }
      }
    
  },
  "/api/social/sentiment-analysis": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Sentiment Analysis",
      "description": "Analyze the sentiment of the given text",
      "parameters": [
        {
          "name": "text",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "example": "I love using AI for text analysis!"
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Successful sentiment analysis",
          "schema": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "success"
              },
              "sentiment": {
                "type": "string",
                "example": "positive"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Text is required"
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Sentiment analysis failed"
              },
              "details": {
                "type": "string",
                "example": "Error message here"
              }
            }
          }
        }
      }
    }
  },
  "/api/social/moderate-comment": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Comment Moderation",
      "description": "Moderate the given comment to approve or reject",
      "parameters": [
        {
          "name": "comment",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "comment": {
                "type": "string",
                "example": "This is a great article!"
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Successful comment moderation",
          "schema": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "success"
              },
              "moderation": {
                "type": "string",
                "example": "approved"
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Comment is required"
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Comment moderation failed"
              },
              "details": {
                "type": "string",
                "example": "Error message here"
              }
            }
          }
        }
      }
    }
  },
  "/api/social/fake-news-detection": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Fake News Detection",
      "description": "Analyze the article text to detect fake news",
      "parameters": [
        {
          "name": "articleText",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "articleText": {
                "type": "string",
                "example": "The world is flat and the government is hiding it."
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Successful fake news detection",
          "schema": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "success"
              },
              "isFake": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Article text is required"
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "Fake news detection failed"
              },
              "details": {
                "type": "string",
                "example": "Error message here"
              }
            }
          }
        }
      }
    }
  },
"/api/social/recommend-hashtags": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Hashtag Recommendation",
      "parameters": [
        {
          "name": "content",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Exploring the latest advancements in artificial intelligence and machine learning."
          },
          "description": "The content for hashtag suggestion"
        }
      ],
      "responses": {
        "200": {
          "description": "Hashtag recommendation success",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  },
                  "hashtags": {
                    "type": "array",
                    "items": { "type": "string" },
                    "example": ["#AI", "#MachineLearning", "#TechTrends"]
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request - Missing content"
        },
        "500": {
          "description": "Server error"
        }
      }
    }
  },
  "/api/social/auto-reply": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Automated Replies",
      "parameters": [
        {
          "name": "message",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Hello, how are you?"
          },
          "description": "The message to generate a reply for"
        }
      ],
      "responses": {
        "200": {
          "description": "Auto-reply generation success",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  },
                  "reply": {
                    "type": "string",
                    "example": "Thank you for reaching out! I'll get back to you soon."
                  }
                }
              }
            }
          }
        },
        "400": { "description": "Bad request - Missing message" },
        "500": { "description": "Server error" }
      }
    }
  }, 
  
"/api/analytics/spending-patterns": {
  "post": {
    "tags": ["Llama"],
    "summary": "Analyze spending patterns",
    "description": "Identifies key spending patterns and trends from transaction data.",
   "parameters": [
  {
    "name": "transactions",
    "in": "body",
    "required": true,
    "description": "Array of transactions for processing, JSON-encoded",
    "schema": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "category": {
                "type": "string"
              },
              "date": {
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      },
      "example": {
        "transactions": [
          {
            "amount": 120,
            "category": "food",
            "date": "2025-02-10"
          }
        ]
      }
    }
  }
]
,
    "responses": {
      "200": {
        "description": "Successful analysis",
        "content": {
          "application/json": {
            "example": {
              "status": "success",
              "insights": "Users spend most on food during weekends."
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Missing or invalid transactions parameter" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "example": { "error": "Spending analysis failed", "details": "Server error" }
          }
        }
      }
    }
  }
}

, "/api/analytics/risk-assessment": {
  "post": {
    "tags": ["Llama"],
    "summary": "Assess financial risk",
    "description": "Evaluates financial risk level based on customer profile data.",
    "parameters": [
      {
        "name": "customerProfile",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "customerProfile": {
              "type": "string",
              "example": "Frequent late payments, high debt"
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Successful risk assessment",
        "content": {
          "application/json": {
            "example": {
              "status": "success",
              "riskLevel": "High",
              "recommendation": "Consider reducing debt and making timely payments."
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Missing fields: customerProfile" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "example": { "error": "Risk assessment failed", "details": "Server error" }
          }
        }
      }
    }
  }
},
 "/api/analytics/revenue-forecast": {
  "post": {
    "tags": ["Llama"],
    "summary": "Predict revenue forecast",
    "description": "Generates revenue predictions for the next quarter using historical financial data.",
    "parameters": [
      {
        "name": "historicalData",
        "in": "body",
        "required": true,
        "description": "Array of historical financial data for forecasting, JSON-encoded",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "quarter": {
                "type": "string"
              },
              "revenue": {
                "type": "number"
              }
            },
            "example": [
              {
                "quarter": "Q1 2024",
                "revenue": 50000
              }
            ]
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Successful forecast prediction",
        "content": {
          "application/json": {
            "example": {
              "status": "success",
              "forecastedRevenue": 60000
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Missing or invalid historicalData parameter" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "example": { "error": "Revenue forecast failed", "details": "Server error" }
          }
        }
      }
    }
  }
}

, 
"/api/analytics/customer-retention": {
  "post": {
    "tags": ["Llama"],
    "summary": "Analyze customer retention",
    "description": "Identifies churn risks and strategies for retaining customers.",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "description": "Transaction and customer history data for retention analysis",
        "schema": {
          "type": "object",
          "properties": {
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "customerId": {
                    "type": "string",
                    "example": "123"
                  },
                  "purchaseDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-11-15"
                  }
                }
              }
            },
            "customerHistory": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "customer": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "id": {
                    "type": "string",
                    "example": "123"
                  },
                  "lastPurchase": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-11-15"
                  }
                }
              }
            }
          },
          "example": {
            "transactions": [
              {
                "customerId": "123",
                "purchaseDate": "2024-11-15"
              }
            ],
            "customerHistory": [
              {
                "customer": "John Doe",
                "id": "123",
                "lastPurchase": "2024-11-15"
              }
            ]
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Retention analysis completed",
        "content": {
          "application/json": {
            "example": {
              "status": "success",
              "churnRisk": "High",
              "retentionStrategy": "Offer discounts and loyalty programs"
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Missing or invalid parameters" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "example": { "error": "Retention analysis failed", "details": "Server error" }
          }
        }
      }
    }
  }
}
,
 "/api/banking/fraud-detection": {
  "post": {
    "tags": ["Llama"],
    "summary": "Detect fraudulent transactions",
    "description": "Analyzes transaction details to determine if fraud is present.",
    "parameters": [
      {
        "name": "transactionDetails",
        "in": "body",
        "required": true,
        "description": "Transaction details for fraud detection, JSON-encoded",
        "schema": {
          "type": "object",
          "properties": {
            "transactionDetails": {
              "type": "string",
              "example": "Unusual high-value transaction at midnight"
            }
          }
        },
        "example": {
          "transactionDetails": "Unusual high-value transaction at midnight"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Fraud analysis completed"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Missing or invalid transactionDetails" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error"
      }
    }
  }
}

, 
"/api/ai/debt-collection": {
      "post": {
        "tags": ["Llama"],
        "summary": "Initiate a debt collection notification",
        "description": "Sends a debt collection reminder via different methods (SMS, voice note, AI call, WhatsApp).",
        "parameters": [
          {
            "name": "debtorId",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "example": "D12345"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "example": "John Doe"
          },
          {
            "name": "phone",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "example": "+1234567890"
          },
          {
            "name": "amountDue",
            "in": "query",
            "required": true,
            "schema": { "type": "number" },
            "example": 500
          },
          {
            "name": "notifyMethod",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["sms", "voice", "call", "whatsapp"]
            },
            "example": "sms"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification sent successfully",
            "content": {
              "application/json": {
                "examples": {
                  "smsExample": {
                    "summary": "SMS Notification",
                    "value": {
                      "status": "success",
                      "sms": "Reminder sent via SMS"
                    }
                  },
                  "voiceExample": {
                    "summary": "Voice Note",
                    "value": {
                      "status": "success",
                      "voiceNote": "Generated voice note URL"
                    }
                  },
                  "callExample": {
                    "summary": "AI Call",
                    "value": {
                      "status": "success",
                      "call": "AI call initiated"
                    }
                  },
                  "whatsappExample": {
                    "summary": "WhatsApp Message",
                    "value": {
                      "status": "success",
                      "whatsapp": "Message sent via WhatsApp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid fields",
            "content": {
              "application/json": {
                "example": {
                  "error": "Missing required fields"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Debt collection failed",
            "content": {
              "application/json": {
                "example": {
                  "error": "Debt collection failed",
                  "details": "Internal processing error"
                }
              }
            }
          }
        }
      }
    },
"/api/analytics": {
  "get": {
    "summary": "Get overall analytics",
    "tags": ["Llama"],
    "parameters": [
      { "name": "task", "in": "query", "type": "string", "description": "Filter by task" },
      { "name": "startTime", "in": "query", "type": "string", "format": "date-time", "description": "Start time for filtering" },
      { "name": "endTime", "in": "query", "type": "string", "format": "date-time", "description": "End time for filtering" }
    ],
    "responses": {
      "200": {
        "description": "Analytics data",
        "schema": { "$ref": "#/definitions/AnalyticsResponse" },
        "examples": {
          "application/json": {
            "tasksCompleted": 1250,
            "averageProcessingTime": "1.23s",
            "errorRate": "2.5%",
            "popularTasks": [
              { "task": "sentiment-analysis", "count": 500 },
              { "task": "fraud-detection", "count": 350 }
            ]
          }
        }
      }
    }
  }
},
"/api/analytics/errors": {
  "get": {
    "summary": "Get error analytics",
    "tags": ["Llama"],
    "responses": {
      "200": {
        "description": "Error statistics",
        "schema": { "$ref": "#/definitions/ErrorResponse" },
        "examples": {
          "application/json": {
            "totalErrors": 75,
            "lastError": {
              "timestamp": "2025-02-20T14:05:00Z",
              "message": "Model execution timeout",
              "task": "image-classification"
            },
            "errorDistribution": {
              "timeout": 30,
              "invalid-input": 20,
              "server-error": 25
            }
          }
        }
      }
    }
  }
},
"/api/analytics/model": {
  "get": {
    "summary": "Get model analytics",
    "tags": ["Llama"],
    "responses": {
      "200": {
        "description": "Model execution statistics",
        "schema": { "$ref": "#/definitions/ModelResponse" },
        "examples": {
          "application/json": {
            "modelName": "Llama-7B",
            "totalExecutions": 5000,
            "averageLatency": "1.5s",
            "peakLoad": "12 executions per second",
            "mostUsedTask": "text-generation"
          }
        }
      }
    }
  }
},
"/api/analytics/task/{task}": {
  "get": {
    "summary": "Get analytics for a specific task",
    "tags": ["Llama"],
    "parameters": [
      {
        "name": "task",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Task name"
      }
    ],
    "responses": {
      "200": {
        "description": "Task execution statistics",
        "schema": { "$ref": "#/definitions/TaskResponse" },
        "examples": {
          "application/json": {
            "task": "sentiment-analysis",
            "totalRequests": 1000,
            "successRate": "97%",
            "averageProcessingTime": "0.8s",
            "lastExecution": {
              "timestamp": "2025-02-21T10:15:30Z",
              "input": "The service was excellent!",
              "output": "Positive"
            }
          }
        }
      },
      "400": {
        "description": "Bad request. Task parameter is required or invalid.",
        "schema": {
          "type": "object",
          "properties": {
            "error": { "type": "string", "example": "Task parameter is required" }
          }
        }
      },
      "500": {
        "description": "Internal server error while fetching analytics",
        "schema": {
          "type": "object",
          "properties": {
            "error": { "type": "string", "example": "Internal Server Error" },
            "details": { "type": "string", "example": "Database connection failed" }
          }
        }
      }
    }
  }
}

, "/api/social/generate-image": {
  "post": {
    "tags": ["Llama"],
    "summary": "Generate an image based on a text prompt.",
    "description": "This endpoint generates an image using the Llama AI model based on the given prompt.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "example": "A futuristic cityscape with flying cars"
              }
            },
            "required": ["prompt"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Image successfully generated.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "imagePath": {
                  "type": "string",
                  "example": "/generated-images/1700000000.png"
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid request due to missing or incorrect parameters.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "A valid prompt is required for image generation"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Failed to generate image"
                },
                "details": {
                  "type": "string",
                  "example": "Error message details"
                }
              }
            }
          }
        }
      }
    }
  } 
},
"/api/analytics/time": {
  "get": {
    "summary": "Get analytics filtered by time",
    "tags": ["Llama"],
    "parameters": [
      {"name": "startTime", "in": "query", "type": "string", "format": "date-time", "description": "Start time for filtering"},
      {"name": "endTime", "in": "query", "type": "string", "format": "date-time", "description": "End time for filtering"}
    ],
    "responses": {
      "200": {
        "description": "Time-based analytics",
        "schema": { "$ref": "#/definitions/TimeResponse" }
      }
    }
  }

},

 
"/api/ai/analytics": {
      "get": {
        "tags": ["Llama"],
        "summary": "Retrieve AI analytics",
        "description": "Fetch analytics data with optional filtering by task, time range, and errors.",
        "parameters": [
          {
            "name": "task",
            "in": "query",
            "description": "Filter results by a specific task name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time (ISO format or timestamp) to filter analytics.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time (ISO format or timestamp) to filter analytics.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "errorsOnly",
            "in": "query",
            "description": "Set to true to filter only error-related requests.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with analytics data.",
            "schema": {
              "type": "object",
              "properties": {
                "totalRequests": { "type": "integer", "example": 120 },
                "totalErrors": { "type": "integer", "example": 5 },
                "avgExecutionTime": { "type": "number", "format": "float", "example": 250.45 },
                "minExecutionTime": { "type": "integer", "example": 150 },
                "maxExecutionTime": { "type": "integer", "example": 500 },
                "stdDeviation": { "type": "number", "format": "float", "example": 50.23 },
                "taskStats": {
                  "type": "object",
                  "example": { "task1": 50, "task2": 70 }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string", "example": "Invalid request" },
                "details": { "type": "string", "example": "Start time is not valid" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string", "example": "Internal server error" },
                "details": { "type": "string", "example": "Unexpected error occurred" }
              }
            }
          }
        }
      }
    },
  "/api/social/generate-caption": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Image Captioning",
      "parameters": [
        {
          "name": "imageUrl",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string",
            "example": "https://images.app.goo.gl/QZiAubbaY5fXt51r9"
          },
          "description": "The URL of the image to caption"
        } 
      ],
      "responses": {
        "200": {
          "description": "Image captioning success",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  },
                  "caption": {
                    "type": "string",
                    "example": "A serene landscape at sunset with a calm lake and colorful sky."
                  }
                }
              }
            }
          }
        },
        "400": { "description": "Bad request - Missing image URL" },
        "500": { "description": "Server error" }
      }
    }
  },
  "/api/social/analyze-trends": {
    "post": {
      "tags": ["Llama"],
      "summary": "AI-Powered Trend Analysis",
      "parameters": [
        {
          "name": "topic",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string",
            "example": "AI Technology"
          },
          "description": "The topic for trend analysis"
        }
      ],
      "responses": {
        "200": {
          "description": "Trend analysis success",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "success"
                  },
                  "trends": {
                    "type": "string",
                    "example": "AI, Social Media, Trend Analysis"
                  }
                }
              }
            }
          }
        },
        "400": { "description": "Bad request - Missing topic" },
        "500": { "description": "Server error" }
      }
    }
  },
 "/api/ai/execute": {
    "post": { 
      "tags": ["Llama"],
      "summary": "Execute AI Task", 
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "prompt": { "type": "string", "example": "Generate a Python function to sort an array." },
              "task": { "type": "string", "example": "code-generation" },
              "maxTokens": { "type": "integer", "example": 100 },
              "temperature": { "type": "number", "example": 0.7 },
              "topK": { "type": "integer", "example": 40 }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Execution successful" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Execution failed" }
      }
    }
  },
  "/api/ai/summarize": {
    "post": {
      "tags": ["Llama"],
      "summary": "Summarize Text",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "text": { "type": "string", "example": "Artificial Intelligence (AI) is the simulation of human intelligence in machines." },
              "maxTokens": { "type": "integer", "example": 50 },
              "temperature": { "type": "number", "example": 0.5 }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Summary generated" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Summarization failed" }
      }
    }
  },
  "/api/ai/generate-blog": {
    "post": {
      "tags": ["Llama"],
      "summary": "Generate Blog Post",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "topic": { "type": "string", "example": "The Future of AI in Healthcare" },
              "wordCount": { "type": "integer", "example": 500 },
              "tone": { "type": "string", "example": "informative" },
              "temperature": { "type": "number", "example": 0.6 }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Blog generated" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Blog generation failed" }
      }
    }
  },
  "/api/ai/translate": {
    "post": {
      "tags": ["Llama"],
      "summary": "Translate Text",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "text": { "type": "string", "example": "Hello, how are you?" },
              "sourceLang": { "type": "string", "example": "en" },
              "targetLang": { "type": "string", "example": "es" }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Translation successful" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Translation failed" }
      }
    }
  },
  "/api/ai/generate-code": {
    "post": {
      "tags": ["Llama"],
      "summary": "Generate Code",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "description": { "type": "string", "example": "Create a Node.js Express API endpoint." },
              "language": { "type": "string", "example": "JavaScript" },
              "maxTokens": { "type": "integer", "example": 150 },
              "temperature": { "type": "number", "example": 0.8 }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Code generated" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Code generation failed" }
      }
    }
  },
  "/api/ai/chat": {
    "post": {
      "tags": ["Llama"],
      "summary": "Chat with AI",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "message": { "type": "string", "example": "What is the capital of France?" },
              "context": { "type": "string", "example": "General knowledge" },
              "temperature": { "type": "number", "example": 0.7 }
            }
          }
        }
      ],
      "responses": {
        "200": { "description": "Chat response received" },
        "400": { "description": "Bad Request" },
        "500": { "description": "Chat response failed" }
      }
    }
    },
 "/api/ai/generate-sql": {
  "post": {
    "tags": ["Llama"],
    "summary": "Generate SQL Query",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "description": { 
              "type": "string",
              "example": "Retrieve all users who signed up in the last 30 days"
            },
            "databaseType": { 
              "type": "string",
              "example": "PostgreSQL"
            },
            "temperature": { 
              "type": "number",
              "example": 0.7
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "SQL query generated",
        "content": {
          "application/json": {
            "example": {
              "query": "SELECT * FROM users WHERE signup_date >= CURRENT_DATE - INTERVAL '30 days';"
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Description and databaseType are required" }
          }
        }
      },
      "500": {
        "description": "SQL generation failed",
        "content": {
          "application/json": {
            "example": { "error": "SQL generation failed", "details": "Internal server error" }
          }
        }
      }
    }
  }
}
,   "/api/ai/sentiment": {
  "post": {
    "tags": ["Llama"],
    "summary": "Analyze Sentiment",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "example": "I love this product!"
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Sentiment analysis result",
        "content": {
          "application/json": {
            "example": { "sentiment": "positive", "confidence": 0.95 }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Text is required" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error"
      }
    }
  }
},
"/api/ai/analyze-data": {
  "post": {
    "tags": ["Llama"],
    "summary": "Analyze Data",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "dataset": {
              "type": "array",
              "items": { "type": "object" },
              "example": [
                { "product": "Laptop", "sales": 1500 },
                { "product": "Phone", "sales": 2200 }
              ]
            },
            "question": {
              "type": "string",
              "example": "Which product has the highest sales?"
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Data analysis result",
        "content": {
          "application/json": {
            "example": { "answer": "Phone has the highest sales with 2200 units." }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Dataset and question are required" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error"
      }
    }
  }
},
"/api/ai/grammar-check": {
  "post": {
    "tags": ["Llama"],
    "summary": "Grammar Check",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "example": "She go to the market yesterday."
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Grammar correction result",
        "content": {
          "application/json": {
            "example": { "corrected_text": "She went to the market yesterday." }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "example": { "error": "Text is required" }
          }
        }
      },
      "500": {
        "description": "Internal Server Error"
      }
    }
  }
},
"/api/ai/image-caption": {
  "post": {
    "tags": ["Llama"],
    "summary": "Generate an image caption",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "imageUrl": { "type": "string", "example": "https://example.com/image.jpg" }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Caption generated successfully",
        "content": {
          "application/json": {
            "example": { "caption": "A sunset over the ocean with birds flying." }
          }
        }
      },
      "400": { "description": "Bad Request - Missing imageUrl" },
      "500": { "description": "Internal Server Error" }
    }
  }
},
"/api/ai/extract-keywords": {
  "post": {
    "tags": ["Llama"],
    "summary": "Extract keywords from text",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "text": { "type": "string", "example": "Artificial Intelligence is transforming the world." }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Keywords extracted successfully",
        "content": {
          "application/json": {
            "example": { "keywords": "Artificial Intelligence, world, transforming" }
          }
        }
      },
      "400": { "description": "Bad Request - Missing text" },
      "500": { "description": "Internal Server Error" }
    }
  }
},
"/api/ai/paraphrase": {
  "post": {
    "tags": ["Llama"],
    "summary": "Paraphrase text",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "text": { "type": "string", "example": "The quick brown fox jumps over the lazy dog." },
            "style": { "type": "string", "example": "formal", "default": "neutral" }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Paraphrased text successfully",
        "content": {
          "application/json": {
            "example": { "paraphrasedText": "The swift auburn fox leaps over the idle hound." }
          }
        }
      },
      "400": { "description": "Bad Request - Missing text" },
      "500": { "description": "Internal Server Error" }
    }
  }
},  "/api/ai/chatbot": {
  "post": {
    "tags": ["Llama"],
    "summary": "Chatbot interaction",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "message": { "type": "string", "example": "Hello, how are you?" }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Chatbot response",
        "content": {
          "application/json": {
            "example": { "reply": "I'm doing well, thank you!" }
          }
        }
      },
      "400": { "description": "Bad Request - Missing message" },
      "500": { "description": "Internal Server Error" }
    }
  }
},
"/api/ai/text-to-video": {
  "post": {
    "tags": ["Llama"],
    "summary": "Convert text to video",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "text": { "type": "string", "example": "A dog running in a field." }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Video generated successfully",
        "content": {
          "application/json": {
            "example": { "videoUrl": "https://example.com/video.mp4" }
          }
        }
      },
      "400": { "description": "Bad Request - Missing text" },
      "500": { "description": "Internal Server Error" }
    }
  }
},
"/api/ai/video-to-text": {
  "post": {
    "tags": ["Llama"],
    "summary": "Extract text from video",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "videoUrl": { "type": "string", "example": "https://example.com/video.mp4" }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Extracted text from video",
        "content": {
          "application/json": {
            "example": { "text": "A dog is running in the field." }
          }
        }
      },
      "400": { "description": "Bad Request - Missing videoUrl" },
      "500": { "description": "Internal Server Error" }
    }
  }
},
"/api/ai/voice-to-text": {
  "post": {
    "tags": ["Llama"],
    "summary": "Convert voice to text",
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "audioUrl": { "type": "string", "example": "https://example.com/audio.mp3" }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Converted text from audio",
        "content": {
          "application/json": {
            "example": { "text": "Hello, how are you?" }
          }
        }
      },
      "400": { "description": "Bad Request - Missing audioUrl" },
      "500": { "description": "Internal Server Error" }
    }
  } 
},
    "/auth/forgot-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request a password reset link",
        "description": "Sends an email with a password reset link.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "404": {
            "description": "User does not exist"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset user password",
        "description": "Resets the user's password with a valid token and new password.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/sendOTP": {
      "get": {
        "tags": ["otp"],
        "summary": "Send OTP to email",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email to send OTP to"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/verifyOTP": {
      "get": {
        "tags": ["otp"],
        "summary": "Verify OTP",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email to verify OTP for"
            }
          },
          {
            "in": "query",
            "name": "otp",
            "required": true,
            "schema": {
              "type": "string",
              "description": "OTP to verify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verification successful"
          },
          "400": {
            "description": "Invalid OTP"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/sendResetLink": {
      "get": {
        "tags": ["otp"],
        "summary": "Send password reset link to email",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email to send reset link to"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset link sent successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/resetPassword": {
      "post": {
        "tags": ["otp"],
        "summary": "Reset password using the reset token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully"
          },
          "400": {
            "description": "Invalid or expired reset token, or passwords do not match"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/feedback": {
      "post": {
        "tags": ["otp"],
        "summary": "Send user feedback",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "message": {
                    "type": "string",
                    "description": "Feedback message"
                  }
                },
                "required": ["email", "message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback sent successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/sendEmailNotification": {
      "post": {
        "tags": ["otp"],
        "summary": "Send an email notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "400": {
            "description": "Missing required fields or invalid data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/reset-Password/{token}": {
      "get": {
        "tags": ["otp"],
        "summary": "Route to serve the password reset form",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Password reset token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset form rendered"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SendOTPRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email to send OTP to"
          }
        },
        "required": ["email"]
      },
      "VerifyOTPRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email to verify OTP for"
          },
          "otp": {
            "type": "string",
            "description": "OTP to verify"
          }
        },
        "required": ["email", "otp"]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Reset token for password reset"
          },
          "newPassword": {
            "type": "string",
            "description": "New password to set"
          },
          "confirmPassword": {
            "type": "string",
            "description": "Confirmation of the new password"
          }
        },
        "required": ["token", "newPassword", "confirmPassword"]
      },
      "SendEmailRequest": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "Recipient email address"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the email"
          },
          "html": {
            "type": "string",
            "description": "HTML content of the email"
          },
          "text": {
            "type": "string",
            "description": "Plain text content of the email"
          }
        },
        "required": ["to", "subject", "html", "text"]
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
     
"AnalyticsResponse": {
  "type": "object",
  "properties": {
    "totalRequests": {"type": "integer"},
    "totalErrors": {"type": "integer"},
    "avgExecutionTime": {"type": "number"},
    "minExecutionTime": {"type": "number"},
    "maxExecutionTime": {"type": "number"},
    "stdDeviation": {"type": "number"},
    "taskStats": {"type": "object"}
  }
},
"ErrorResponse": {
  "type": "object",
  "properties": {
    "totalErrors": {"type": "integer"},
    "errorRate": {"type": "string"},
    "lastErrors": {"type": "array", "items": {"type": "string"}}
  }
},
"ModelResponse": {
  "type": "object",
  "properties": {
    "totalRequests": {"type": "integer"},
    "successfulResponses": {"type": "integer"},
    "failedResponses": {"type": "integer"},
    "avgExecutionTime": {"type": "number"}
  }
},
"TaskResponse": {
  "type": "object",
  "properties": {
    "task": {"type": "string"},
    "requestCount": {"type": "integer"},
    "avgExecutionTime": {"type": "number"},
    "minExecutionTime": {"type": "number"},
    "maxExecutionTime": {"type": "number"}
  }
},
"TimeResponse": {
  "type": "object",
  "properties": {
    "totalRequests": {"type": "integer"},
    "avgExecutionTime": {"type": "number"}
  },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ForgotPassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "SendOtp": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "VerifyOtp": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "otp": {
          "type": "string"
        }
      }
    } 
  }
}
}