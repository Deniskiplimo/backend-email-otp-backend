import { nanoid as createId } from "nanoid";
import { FunctionEventSource } from "../core/FunctionEventSource.js";
import { getGlobalFunctionLogging } from "../core/GlobalFunctionLogging.js";
import { getGlobalFunctionObservers } from "../core/GlobalFunctionObservers.js";
import { AbortError } from "../core/api/AbortError.js";
import { getFunctionCallLogger } from "../core/getFunctionCallLogger.js";
import { getRun } from "../core/getRun.js";
import { startDurationMeasurement } from "../util/DurationMeasurement.js";
import { runSafe } from "../util/runSafe.js";
export async function retrieve(retriever, query, options) {
    const run = await getRun(options?.run);
    const eventSource = new FunctionEventSource({
        observers: [
            ...getFunctionCallLogger(options?.logging ?? getGlobalFunctionLogging()),
            ...getGlobalFunctionObservers(),
            ...(run?.functionObserver != null ? [run.functionObserver] : []),
            ...(options?.observers ?? []),
        ],
        errorHandler: run?.errorHandler,
    });
    const durationMeasurement = startDurationMeasurement();
    const startMetadata = {
        functionType: "retrieve",
        callId: `call-${createId()}`,
        runId: run?.runId,
        sessionId: run?.sessionId,
        userId: run?.userId,
        functionId: options?.functionId,
        query,
        timestamp: durationMeasurement.startDate,
        startTimestamp: durationMeasurement.startDate,
    };
    eventSource.notify({
        eventType: "started",
        ...startMetadata,
    });
    const result = await runSafe(() => retriever.retrieve(query, {
        functionId: options?.functionId,
        logging: options?.logging,
        observers: options?.observers,
        run,
    }));
    const finishMetadata = {
        eventType: "finished",
        ...startMetadata,
        finishTimestamp: new Date(),
        durationInMs: durationMeasurement.durationInMs,
    };
    if (!result.ok) {
        if (result.isAborted) {
            eventSource.notify({
                ...finishMetadata,
                eventType: "finished",
                result: {
                    status: "abort",
                },
            });
            throw new AbortError();
        }
        eventSource.notify({
            ...finishMetadata,
            eventType: "finished",
            result: {
                status: "error",
                error: result.error,
            },
        });
        throw result.error;
    }
    eventSource.notify({
        ...finishMetadata,
        eventType: "finished",
        result: {
            status: "success",
            value: result.value,
        },
    });
    return result.value;
}
