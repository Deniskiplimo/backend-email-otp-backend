import { safeParseJsonWithSchema } from "../util/parseJSON.js";
import { AsyncQueue } from "./AsyncQueue.js";
import { parseEventSourceStream } from "./parseEventSourceStream.js";
export function readEventSourceStream({ stream, schema, errorHandler, }) {
    const queue = new AsyncQueue();
    // run async (no await on purpose):
    parseEventSourceStream({ stream })
        .then(async (events) => {
        try {
            for await (const event of events) {
                const validationResult = safeParseJsonWithSchema(event.data, schema);
                if (!validationResult.success) {
                    errorHandler?.(validationResult.error);
                    continue;
                }
                queue.push(validationResult.data);
            }
        }
        catch (error) {
            errorHandler?.(error);
        }
        finally {
            queue.close();
        }
    })
        .catch((error) => {
        errorHandler?.(error);
        queue.close();
    });
    return queue;
}
