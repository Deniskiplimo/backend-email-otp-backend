import { z } from "zod";
import { FunctionOptions } from "../../core/FunctionOptions.js";
import { ApiConfiguration } from "../../core/api/ApiConfiguration.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { PromptFormat } from "../../model-function/PromptFormat.js";
import { ImageGenerationModel, ImageGenerationModelSettings } from "../../model-function/generate-image/ImageGenerationModel.js";
import { PromptFormatImageGenerationModel } from "../../model-function/generate-image/PromptFormatImageGenerationModel.js";
import { StabilityImageGenerationPrompt } from "./StabilityImageGenerationPrompt.js";
/**
 * Create an image generation model that calls the Stability AI image generation API.
 *
 * @see https://api.stability.ai/docs#tag/v1generation/operation/textToImage
 *
 * @example
 * const image = await generateImage(
 *   new StabilityImageGenerationModel({
 *     model: "stable-diffusion-512-v2-1",
 *     cfgScale: 7,
 *     clipGuidancePreset: "FAST_BLUE",
 *     height: 512,
 *     width: 512,
 *     samples: 1,
 *     steps: 30,
 *   })
 *   [
 *     { text: "the wicked witch of the west" },
 *     { text: "style of early 19th century painting", weight: 0.5 },
 *   ]
 * );
 */
export declare class StabilityImageGenerationModel extends AbstractModel<StabilityImageGenerationSettings> implements ImageGenerationModel<StabilityImageGenerationPrompt, StabilityImageGenerationSettings> {
    constructor(settings: StabilityImageGenerationSettings);
    readonly provider: "stability";
    get modelName(): StabilityImageGenerationModelType;
    callAPI(input: StabilityImageGenerationPrompt, options?: FunctionOptions): Promise<StabilityImageGenerationResponse>;
    get settingsForEvent(): Partial<StabilityImageGenerationSettings>;
    doGenerateImage(prompt: StabilityImageGenerationPrompt, options?: FunctionOptions): Promise<{
        response: {
            artifacts: {
                base64: string;
                seed: number;
                finishReason: "SUCCESS" | "ERROR" | "CONTENT_FILTERED";
            }[];
        };
        base64Image: string;
    }>;
    withBasicPrompt(): PromptFormatImageGenerationModel<string, StabilityImageGenerationPrompt, StabilityImageGenerationSettings, this>;
    withPromptFormat<INPUT_PROMPT>(promptFormat: PromptFormat<INPUT_PROMPT, StabilityImageGenerationPrompt>): PromptFormatImageGenerationModel<INPUT_PROMPT, StabilityImageGenerationPrompt, StabilityImageGenerationSettings, this>;
    withSettings(additionalSettings: StabilityImageGenerationSettings): this;
}
declare const stabilityImageGenerationModels: readonly ["stable-diffusion-v1-5", "stable-diffusion-512-v2-1", "stable-diffusion-xl-1024-v0-9", "stable-diffusion-xl-1024-v1-0"];
export type StabilityImageGenerationModelType = (typeof stabilityImageGenerationModels)[number] | (string & {});
export interface StabilityImageGenerationSettings extends ImageGenerationModelSettings {
    api?: ApiConfiguration;
    model: StabilityImageGenerationModelType;
    height?: number;
    width?: number;
    cfgScale?: number;
    clipGuidancePreset?: string;
    sampler?: StabilityImageGenerationSampler;
    samples?: number;
    seed?: number;
    steps?: number;
    stylePreset?: StabilityImageGenerationStylePreset;
}
declare const stabilityImageGenerationResponseSchema: z.ZodObject<{
    artifacts: z.ZodArray<z.ZodObject<{
        base64: z.ZodString;
        seed: z.ZodNumber;
        finishReason: z.ZodEnum<["SUCCESS", "ERROR", "CONTENT_FILTERED"]>;
    }, "strip", z.ZodTypeAny, {
        base64: string;
        seed: number;
        finishReason: "SUCCESS" | "ERROR" | "CONTENT_FILTERED";
    }, {
        base64: string;
        seed: number;
        finishReason: "SUCCESS" | "ERROR" | "CONTENT_FILTERED";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    artifacts: {
        base64: string;
        seed: number;
        finishReason: "SUCCESS" | "ERROR" | "CONTENT_FILTERED";
    }[];
}, {
    artifacts: {
        base64: string;
        seed: number;
        finishReason: "SUCCESS" | "ERROR" | "CONTENT_FILTERED";
    }[];
}>;
export type StabilityImageGenerationResponse = z.infer<typeof stabilityImageGenerationResponseSchema>;
export type StabilityImageGenerationStylePreset = "enhance" | "anime" | "photographic" | "digital-art" | "comic-book" | "fantasy-art" | "line-art" | "analog-film" | "neon-punk" | "isometric" | "low-poly" | "origami" | "modeling-compound" | "cinematic" | "3d-model" | "pixel-art" | "tile-texture";
export type StabilityImageGenerationSampler = "DDIM" | "DDPM" | "K_DPMPP_2M" | "K_DPMPP_2S_ANCESTRAL" | "K_DPM_2" | "K_DPM_2_ANCESTRAL" | "K_EULER" | "K_EULER_ANCESTRAL" | "K_HEUN" | "K_LMS";
export {};
