import { z } from "zod";
import { callWithRetryAndThrottle } from "../../core/api/callWithRetryAndThrottle.js";
import { createJsonResponseHandler, postJsonToApi, } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { PromptFormatImageGenerationModel } from "../../model-function/generate-image/PromptFormatImageGenerationModel.js";
import { StabilityApiConfiguration } from "./StabilityApiConfiguration.js";
import { failedStabilityCallResponseHandler } from "./StabilityError.js";
import { mapBasicPromptToStabilityFormat, } from "./StabilityImageGenerationPrompt.js";
/**
 * Create an image generation model that calls the Stability AI image generation API.
 *
 * @see https://api.stability.ai/docs#tag/v1generation/operation/textToImage
 *
 * @example
 * const image = await generateImage(
 *   new StabilityImageGenerationModel({
 *     model: "stable-diffusion-512-v2-1",
 *     cfgScale: 7,
 *     clipGuidancePreset: "FAST_BLUE",
 *     height: 512,
 *     width: 512,
 *     samples: 1,
 *     steps: 30,
 *   })
 *   [
 *     { text: "the wicked witch of the west" },
 *     { text: "style of early 19th century painting", weight: 0.5 },
 *   ]
 * );
 */
export class StabilityImageGenerationModel extends AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "stability"
        });
    }
    get modelName() {
        return this.settings.model;
    }
    async callAPI(input, options) {
        return callWithRetryAndThrottle({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callStabilityImageGenerationAPI({
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                engineId: this.settings.model,
                textPrompts: input,
            }),
        });
    }
    get settingsForEvent() {
        const eventSettingProperties = [
            "baseUrl",
            "height",
            "width",
            "cfgScale",
            "clipGuidancePreset",
            "sampler",
            "samples",
            "seed",
            "steps",
            "stylePreset",
        ];
        return Object.fromEntries(Object.entries(this.settings).filter(([key]) => eventSettingProperties.includes(key)));
    }
    async doGenerateImage(prompt, options) {
        const response = await this.callAPI(prompt, options);
        return {
            response,
            base64Image: response.artifacts[0].base64,
        };
    }
    withBasicPrompt() {
        return this.withPromptFormat(mapBasicPromptToStabilityFormat());
    }
    withPromptFormat(promptFormat) {
        return new PromptFormatImageGenerationModel({
            model: this,
            promptFormat,
        });
    }
    withSettings(additionalSettings) {
        return new StabilityImageGenerationModel(Object.assign({}, this.settings, additionalSettings));
    }
}
const stabilityImageGenerationModels = [
    "stable-diffusion-v1-5",
    "stable-diffusion-512-v2-1",
    "stable-diffusion-xl-1024-v0-9",
    "stable-diffusion-xl-1024-v1-0",
];
const stabilityImageGenerationResponseSchema = z.object({
    artifacts: z.array(z.object({
        base64: z.string(),
        seed: z.number(),
        finishReason: z.enum(["SUCCESS", "ERROR", "CONTENT_FILTERED"]),
    })),
});
async function callStabilityImageGenerationAPI({ api = new StabilityApiConfiguration(), abortSignal, engineId, height, width, textPrompts, cfgScale, clipGuidancePreset, sampler, samples, seed, steps, stylePreset, }) {
    return postJsonToApi({
        url: api.assembleUrl(`/generation/${engineId}/text-to-image`),
        headers: api.headers,
        body: {
            height,
            width,
            text_prompts: textPrompts,
            cfg_scale: cfgScale,
            clip_guidance_preset: clipGuidancePreset,
            sampler,
            samples,
            seed,
            steps,
            style_preset: stylePreset,
        },
        failedResponseHandler: failedStabilityCallResponseHandler,
        successfulResponseHandler: createJsonResponseHandler(stabilityImageGenerationResponseSchema),
        abortSignal,
    });
}
