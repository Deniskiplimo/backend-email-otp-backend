import { z } from "zod";
import { ApiCallError } from "../../core/api/ApiCallError.js";
import { ResponseHandler } from "../../core/api/postToApi.js";
export declare const huggingFaceErrorDataSchema: z.ZodObject<{
    error: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    error: (string | string[]) & (string | string[] | undefined);
}, {
    error: (string | string[]) & (string | string[] | undefined);
}>;
export type HuggingFaceErrorData = z.infer<typeof huggingFaceErrorDataSchema>;
export declare class HuggingFaceError extends ApiCallError {
    readonly data: HuggingFaceErrorData;
    constructor({ data, statusCode, url, requestBodyValues, message, }: {
        message?: string;
        statusCode: number;
        url: string;
        requestBodyValues: unknown;
        data: HuggingFaceErrorData;
    });
}
export declare const failedHuggingFaceCallResponseHandler: ResponseHandler<ApiCallError>;
