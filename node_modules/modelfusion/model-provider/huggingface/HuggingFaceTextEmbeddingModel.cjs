"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuggingFaceTextEmbeddingModel = void 0;
const zod_1 = require("zod");
const callWithRetryAndThrottle_js_1 = require("../../core/api/callWithRetryAndThrottle.cjs");
const postToApi_js_1 = require("../../core/api/postToApi.cjs");
const AbstractModel_js_1 = require("../../model-function/AbstractModel.cjs");
const HuggingFaceApiConfiguration_js_1 = require("./HuggingFaceApiConfiguration.cjs");
const HuggingFaceError_js_1 = require("./HuggingFaceError.cjs");
/**
 * Create a text embedding model that calls a Hugging Face Inference API Feature Extraction Task.
 *
 * @see https://huggingface.co/docs/api-inference/detailed_parameters#feature-extraction-task
 *
 * @example
 * const model = new HuggingFaceTextGenerationModel({
 *   model: "intfloat/e5-base-v2",
 *   maxTexstsPerCall: 5,
 *   retry: retryWithExponentialBackoff({ maxTries: 5 }),
 * });
 *
 * const embeddings = await embedMany(
 *   model,
 *   [
 *     "At first, Nox didn't know what to do with the pup.",
 *     "He keenly observed and absorbed everything around him, from the birds in the sky to the trees in the forest.",
 *   ]
 * );
 */
class HuggingFaceTextEmbeddingModel extends AbstractModel_js_1.AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "huggingface"
        });
        Object.defineProperty(this, "maxValuesPerCall", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contextWindowSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "embeddingDimensions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tokenizer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "countPromptTokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        // There is no limit documented in the HuggingFace API. Use 1024 as a reasonable default.
        this.maxValuesPerCall = settings.maxValuesPerCall ?? 1024;
        this.embeddingDimensions = settings.embeddingDimensions;
    }
    get modelName() {
        return this.settings.model;
    }
    async callAPI(texts, options) {
        if (texts.length > this.maxValuesPerCall) {
            throw new Error(`The HuggingFace feature extraction API is configured to only support ${this.maxValuesPerCall} texts per API call.`);
        }
        return (0, callWithRetryAndThrottle_js_1.callWithRetryAndThrottle)({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callHuggingFaceTextGenerationAPI({
                options: {
                    useCache: true,
                    waitForModel: true,
                },
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                inputs: texts,
            }),
        });
    }
    get settingsForEvent() {
        return {
            embeddingDimensions: this.settings.embeddingDimensions,
            options: this.settings.options,
        };
    }
    async doEmbedValues(texts, options) {
        const response = await this.callAPI(texts, options);
        return {
            response,
            embeddings: response,
        };
    }
    withSettings(additionalSettings) {
        return new HuggingFaceTextEmbeddingModel(Object.assign({}, this.settings, additionalSettings));
    }
}
exports.HuggingFaceTextEmbeddingModel = HuggingFaceTextEmbeddingModel;
const huggingFaceTextEmbeddingResponseSchema = zod_1.z.array(zod_1.z.array(zod_1.z.number()));
async function callHuggingFaceTextGenerationAPI({ api = new HuggingFaceApiConfiguration_js_1.HuggingFaceApiConfiguration(), abortSignal, model, inputs, options, }) {
    return (0, postToApi_js_1.postJsonToApi)({
        url: api.assembleUrl(`/${model}`),
        headers: api.headers,
        body: {
            inputs,
            options: options
                ? {
                    use_cache: options?.useCache,
                    wait_for_model: options?.waitForModel,
                }
                : {},
        },
        failedResponseHandler: HuggingFaceError_js_1.failedHuggingFaceCallResponseHandler,
        successfulResponseHandler: (0, postToApi_js_1.createJsonResponseHandler)(huggingFaceTextEmbeddingResponseSchema),
        abortSignal,
    });
}
