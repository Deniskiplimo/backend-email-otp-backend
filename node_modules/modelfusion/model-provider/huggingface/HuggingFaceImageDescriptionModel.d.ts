/// <reference types="node" />
import { z } from "zod";
import { ApiConfiguration } from "../../core/api/ApiConfiguration.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { FunctionOptions } from "../../core/FunctionOptions.js";
import { ImageDescriptionModel, ImageDescriptionModelSettings } from "../../model-function/describe-image/ImageDescriptionModel.js";
export interface HuggingFaceImageDescriptionModelSettings extends ImageDescriptionModelSettings {
    api?: ApiConfiguration;
    model: string;
}
/**
 * Create an image to text model that calls a Hugging Face Image-to-Text Inference API.
 *
 * @see https://huggingface.co/tasks/image-to-text
 */
export declare class HuggingFaceImageDescriptionModel extends AbstractModel<HuggingFaceImageDescriptionModelSettings> implements ImageDescriptionModel<Buffer, HuggingFaceImageDescriptionModelSettings> {
    constructor(settings: HuggingFaceImageDescriptionModelSettings);
    readonly provider = "huggingface";
    get modelName(): string;
    callAPI(data: Buffer, options?: FunctionOptions): Promise<HuggingFaceImageDescriptionResponse>;
    get settingsForEvent(): Partial<HuggingFaceImageDescriptionModelSettings>;
    readonly countPromptTokens: undefined;
    doDescribeImage(data: Buffer, options?: FunctionOptions): Promise<{
        response: {
            generated_text: string;
        }[];
        description: string;
    }>;
    withSettings(additionalSettings: Partial<HuggingFaceImageDescriptionModelSettings>): this;
}
declare const huggingFaceImageDescriptionResponseSchema: z.ZodArray<z.ZodObject<{
    generated_text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    generated_text: string;
}, {
    generated_text: string;
}>, "many">;
export type HuggingFaceImageDescriptionResponse = z.infer<typeof huggingFaceImageDescriptionResponseSchema>;
export {};
