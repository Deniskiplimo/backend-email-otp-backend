import { z } from "zod";
import { callWithRetryAndThrottle } from "../../core/api/callWithRetryAndThrottle.js";
import { createJsonResponseHandler, postToApi, } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { HuggingFaceApiConfiguration } from "./HuggingFaceApiConfiguration.js";
import { failedHuggingFaceCallResponseHandler } from "./HuggingFaceError.js";
/**
 * Create an image to text model that calls a Hugging Face Image-to-Text Inference API.
 *
 * @see https://huggingface.co/tasks/image-to-text
 */
export class HuggingFaceImageDescriptionModel extends AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "huggingface"
        });
        Object.defineProperty(this, "countPromptTokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
    }
    get modelName() {
        return this.settings.model;
    }
    async callAPI(data, options) {
        return callWithRetryAndThrottle({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callHuggingFaceImageDescriptionAPI({
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                data,
            }),
        });
    }
    get settingsForEvent() {
        return {};
    }
    async doDescribeImage(data, options) {
        const response = await this.callAPI(data, options);
        return {
            response,
            description: response[0].generated_text,
        };
    }
    withSettings(additionalSettings) {
        return new HuggingFaceImageDescriptionModel(Object.assign({}, this.settings, additionalSettings));
    }
}
const huggingFaceImageDescriptionResponseSchema = z.array(z.object({
    generated_text: z.string(),
}));
async function callHuggingFaceImageDescriptionAPI({ api = new HuggingFaceApiConfiguration(), abortSignal, model, data, }) {
    return postToApi({
        url: api.assembleUrl(`/${model}`),
        headers: api.headers,
        body: {
            content: data,
            values: {},
        },
        failedResponseHandler: failedHuggingFaceCallResponseHandler,
        successfulResponseHandler: createJsonResponseHandler(huggingFaceImageDescriptionResponseSchema),
        abortSignal,
    });
}
