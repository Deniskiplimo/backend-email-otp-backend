import { z } from "zod";
import { ApiCallError } from "../../core/api/ApiCallError.js";
import { parseJsonWithZod } from "../../util/parseJSON.js";
export const llamaCppErrorDataSchema = z.object({
    error: z.string(),
});
export class LlamaCppError extends ApiCallError {
    constructor({ data, statusCode, url, requestBodyValues, message = data.error, }) {
        super({ message, statusCode, requestBodyValues, url });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = data;
    }
}
export const failedLlamaCppCallResponseHandler = async ({ response, url, requestBodyValues }) => new LlamaCppError({
    url,
    requestBodyValues,
    statusCode: response.status,
    data: parseJsonWithZod(await response.text(), llamaCppErrorDataSchema),
});
