import { z } from "zod";
import { callWithRetryAndThrottle } from "../../core/api/callWithRetryAndThrottle.js";
import { createJsonResponseHandler, postJsonToApi, } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { LlamaCppApiConfiguration } from "./LlamaCppApiConfiguration.js";
import { failedLlamaCppCallResponseHandler } from "./LlamaCppError.js";
import { LlamaCppTokenizer } from "./LlamaCppTokenizer.js";
export class LlamaCppTextEmbeddingModel extends AbstractModel {
    constructor(settings = {}) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "llamacpp"
        });
        Object.defineProperty(this, "maxValuesPerCall", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "contextWindowSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "embeddingDimensions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tokenizer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tokenizer = new LlamaCppTokenizer(this.settings.api);
        this.embeddingDimensions = this.settings.embeddingDimensions;
    }
    get modelName() {
        return null;
    }
    async tokenize(text) {
        return this.tokenizer.tokenize(text);
    }
    async callAPI(texts, options) {
        if (texts.length > this.maxValuesPerCall) {
            throw new Error(`The Llama.cpp embedding API only supports ${this.maxValuesPerCall} texts per API call.`);
        }
        return callWithRetryAndThrottle({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callLlamaCppEmbeddingAPI({
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                content: texts[0],
            }),
        });
    }
    get settingsForEvent() {
        return {
            embeddingDimensions: this.settings.embeddingDimensions,
        };
    }
    async doEmbedValues(texts, options) {
        const response = await this.callAPI(texts, options);
        return {
            response,
            embeddings: [response.embedding],
        };
    }
    withSettings(additionalSettings) {
        return new LlamaCppTextEmbeddingModel(Object.assign({}, this.settings, additionalSettings));
    }
}
const llamaCppTextEmbeddingResponseSchema = z.object({
    embedding: z.array(z.number()),
});
async function callLlamaCppEmbeddingAPI({ api = new LlamaCppApiConfiguration(), abortSignal, content, }) {
    return postJsonToApi({
        url: api.assembleUrl(`/embedding`),
        headers: api.headers,
        body: { content },
        failedResponseHandler: failedLlamaCppCallResponseHandler,
        successfulResponseHandler: createJsonResponseHandler(llamaCppTextEmbeddingResponseSchema),
        abortSignal,
    });
}
