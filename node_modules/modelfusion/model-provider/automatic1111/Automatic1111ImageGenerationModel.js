import { z } from "zod";
import { callWithRetryAndThrottle } from "../../core/api/callWithRetryAndThrottle.js";
import { createJsonResponseHandler, postJsonToApi, } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { PromptFormatImageGenerationModel } from "../../model-function/generate-image/PromptFormatImageGenerationModel.js";
import { Automatic1111ApiConfiguration } from "./Automatic1111ApiConfiguration.js";
import { failedAutomatic1111CallResponseHandler } from "./Automatic1111Error.js";
import { mapBasicPromptToAutomatic1111Format, } from "./Automatic1111ImageGenerationPrompt.js";
/**
 * Create an image generation model that calls the AUTOMATIC1111 Stable Diffusion Web UI API.
 *
 * @see https://github.com/AUTOMATIC1111/stable-diffusion-webui
 */
export class Automatic1111ImageGenerationModel extends AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Automatic1111"
        });
    }
    get modelName() {
        return this.settings.model;
    }
    async callAPI(input, options) {
        return callWithRetryAndThrottle({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callAutomatic1111ImageGenerationAPI({
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                prompt: input.prompt,
            }),
        });
    }
    get settingsForEvent() {
        return {
            height: this.settings.height,
            width: this.settings.width,
            sampler: this.settings.sampler,
            steps: this.settings.steps,
        };
    }
    async doGenerateImage(prompt, options) {
        const response = await this.callAPI(prompt, options);
        return {
            response,
            base64Image: response.images[0],
        };
    }
    withBasicPrompt() {
        return this.withPromptFormat(mapBasicPromptToAutomatic1111Format());
    }
    withPromptFormat(promptFormat) {
        return new PromptFormatImageGenerationModel({
            model: this,
            promptFormat,
        });
    }
    withSettings(additionalSettings) {
        return new Automatic1111ImageGenerationModel(Object.assign({}, this.settings, additionalSettings));
    }
}
const Automatic1111ImageGenerationResponseSchema = z.object({
    images: z.array(z.string()),
    parameters: z.object({}),
    info: z.string(),
});
async function callAutomatic1111ImageGenerationAPI({ api = new Automatic1111ApiConfiguration(), abortSignal, height, width, prompt, negativePrompt, sampler, steps, seed, model, }) {
    return postJsonToApi({
        url: api.assembleUrl(`/txt2img`),
        headers: api.headers,
        body: {
            height,
            width,
            prompt,
            negative_prompt: negativePrompt,
            sampler_index: sampler,
            steps,
            seed,
            override_settings: {
                sd_model_checkpoint: model,
            },
        },
        failedResponseHandler: failedAutomatic1111CallResponseHandler,
        successfulResponseHandler: createJsonResponseHandler(Automatic1111ImageGenerationResponseSchema),
        abortSignal,
    });
}
