"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.failedAnthropicCallResponseHandler = exports.AnthropicError = exports.anthropicErrorDataSchema = void 0;
const zod_1 = require("zod");
const ApiCallError_js_1 = require("../../core/api/ApiCallError.cjs");
const parseJSON_js_1 = require("../../util/parseJSON.cjs");
exports.anthropicErrorDataSchema = zod_1.z.object({
    error: zod_1.z.object({
        type: zod_1.z.string(),
        message: zod_1.z.string(),
    }),
});
class AnthropicError extends ApiCallError_js_1.ApiCallError {
    constructor({ data, statusCode, url, requestBodyValues, message = data.error.message, }) {
        super({ message, statusCode, requestBodyValues, url });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = data;
    }
}
exports.AnthropicError = AnthropicError;
const failedAnthropicCallResponseHandler = async ({ response, url, requestBodyValues }) => new AnthropicError({
    url,
    requestBodyValues,
    statusCode: response.status,
    data: (0, parseJSON_js_1.parseJsonWithZod)(await response.text(), exports.anthropicErrorDataSchema),
});
exports.failedAnthropicCallResponseHandler = failedAnthropicCallResponseHandler;
