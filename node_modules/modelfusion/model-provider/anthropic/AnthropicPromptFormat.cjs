"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapChatPromptToAnthropicFormat = exports.mapInstructionPromptToAnthropicFormat = void 0;
const validateChatPrompt_js_1 = require("../../model-function/generate-text/validateChatPrompt.cjs");
/**
 * Formats an instruction prompt as an Anthropic prompt.
 */
function mapInstructionPromptToAnthropicFormat() {
    return {
        format: (instruction) => {
            let text = "";
            if (instruction.system != null) {
                text += `${instruction.system}`;
            }
            text += "\n\nHuman:";
            text += instruction.instruction;
            if (instruction.input != null) {
                // use tags per Anthropic instruction:
                // https://docs.anthropic.com/claude/docs/constructing-a-prompt
                text += `\n\n<data>${instruction.input}</data>`;
            }
            text += "\n\nAssistant:";
            return text;
        },
        stopSequences: [],
    };
}
exports.mapInstructionPromptToAnthropicFormat = mapInstructionPromptToAnthropicFormat;
/**
 * Formats a chat prompt as an Anthropic prompt.
 */
function mapChatPromptToAnthropicFormat() {
    return {
        format: (chatPrompt) => {
            (0, validateChatPrompt_js_1.validateChatPrompt)(chatPrompt);
            let text = "";
            for (let i = 0; i < chatPrompt.length; i++) {
                const message = chatPrompt[i];
                // system message:
                if (i === 0 &&
                    "system" in message &&
                    typeof message.system === "string") {
                    text += `${message.system}\n\n`;
                    continue;
                }
                // user message
                if ("user" in message) {
                    text += `\n\nHuman:${message.user}`;
                    continue;
                }
                // ai message:
                if ("ai" in message) {
                    text += `\n\nAssistant:${message.ai}`;
                    continue;
                }
                // unsupported message:
                throw new Error(`Unsupported message: ${JSON.stringify(message)}`);
            }
            // AI message prefix:
            text += `\n\nAssistant:`;
            return text;
        },
        stopSequences: [],
    };
}
exports.mapChatPromptToAnthropicFormat = mapChatPromptToAnthropicFormat;
