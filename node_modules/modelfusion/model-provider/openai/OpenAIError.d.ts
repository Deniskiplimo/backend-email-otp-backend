import { z } from "zod";
import { ApiCallError } from "../../core/api/ApiCallError.js";
import { ResponseHandler } from "../../core/api/postToApi.js";
export declare const openAIErrorDataSchema: z.ZodObject<{
    error: z.ZodObject<{
        message: z.ZodString;
        type: z.ZodString;
        param: z.ZodNullable<z.ZodAny>;
        code: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        code: string | null;
        type: string;
        param?: any;
    }, {
        message: string;
        code: string | null;
        type: string;
        param?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        code: string | null;
        type: string;
        param?: any;
    };
}, {
    error: {
        message: string;
        code: string | null;
        type: string;
        param?: any;
    };
}>;
export type OpenAIErrorData = z.infer<typeof openAIErrorDataSchema>;
export declare class OpenAIError extends ApiCallError {
    readonly data?: OpenAIErrorData;
    constructor({ data, statusCode, url, requestBodyValues, message, }: {
        message: string;
        statusCode: number;
        url: string;
        requestBodyValues: unknown;
        data?: OpenAIErrorData;
    });
}
export declare const failedOpenAICallResponseHandler: ResponseHandler<ApiCallError>;
