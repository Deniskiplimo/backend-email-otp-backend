"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.failedOpenAICallResponseHandler = exports.OpenAIError = exports.openAIErrorDataSchema = void 0;
const zod_1 = require("zod");
const ApiCallError_js_1 = require("../../core/api/ApiCallError.cjs");
const parseJSON_js_1 = require("../../util/parseJSON.cjs");
exports.openAIErrorDataSchema = zod_1.z.object({
    error: zod_1.z.object({
        message: zod_1.z.string(),
        type: zod_1.z.string(),
        param: zod_1.z.any().nullable(),
        code: zod_1.z.string().nullable(),
    }),
});
class OpenAIError extends ApiCallError_js_1.ApiCallError {
    constructor({ data, statusCode, url, requestBodyValues, message, }) {
        super({
            message,
            statusCode,
            requestBodyValues,
            url,
            isRetryable: (statusCode === 429 &&
                // insufficient_quota is also reported as a 429, but it's not retryable:
                data?.error.type !== "insufficient_quota") ||
                statusCode >= 500,
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = data;
    }
}
exports.OpenAIError = OpenAIError;
const failedOpenAICallResponseHandler = async ({ response, url, requestBodyValues }) => {
    const responseBody = await response.text();
    // resilient parsing in case the response is not JSON or does not match the schema:
    try {
        const parsedError = (0, parseJSON_js_1.parseJsonWithZod)(responseBody, exports.openAIErrorDataSchema);
        return new OpenAIError({
            url,
            requestBodyValues,
            statusCode: response.status,
            message: parsedError.error.message,
            data: parsedError,
        });
    }
    catch (parseError) {
        return new OpenAIError({
            url,
            requestBodyValues,
            statusCode: response.status,
            message: responseBody.trim() !== "" ? responseBody : response.statusText,
        });
    }
};
exports.failedOpenAICallResponseHandler = failedOpenAICallResponseHandler;
