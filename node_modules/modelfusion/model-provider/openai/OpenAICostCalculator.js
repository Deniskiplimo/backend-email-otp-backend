import { calculateOpenAIImageGenerationCostInMillicents, } from "./OpenAIImageGenerationModel.js";
import { calculateOpenAIEmbeddingCostInMillicents, isOpenAIEmbeddingModel, } from "./OpenAITextEmbeddingModel.js";
import { calculateOpenAITextGenerationCostInMillicents, isOpenAITextGenerationModel, } from "./OpenAITextGenerationModel.js";
import { calculateOpenAITranscriptionCostInMillicents, } from "./OpenAITranscriptionModel.js";
import { calculateOpenAIChatCostInMillicents, isOpenAIChatModel, } from "./chat/OpenAIChatModel.js";
export class OpenAICostCalculator {
    constructor() {
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "openai"
        });
    }
    async calculateCostInMillicents(call) {
        const type = call.functionType;
        const model = call.model.modelName;
        switch (type) {
            case "image-generation": {
                return calculateOpenAIImageGenerationCostInMillicents({
                    settings: call.settings,
                });
            }
            case "embedding": {
                if (model == null) {
                    return null;
                }
                if (isOpenAIEmbeddingModel(model)) {
                    const responses = Array.isArray(call.result.response)
                        ? call.result.response
                        : [call.result.response];
                    return calculateOpenAIEmbeddingCostInMillicents({
                        model,
                        responses,
                    });
                }
                break;
            }
            case "structure-generation":
            case "text-generation": {
                if (model == null) {
                    return null;
                }
                if (isOpenAIChatModel(model)) {
                    return calculateOpenAIChatCostInMillicents({
                        model,
                        response: call.result.response,
                    });
                }
                if (isOpenAITextGenerationModel(model)) {
                    return calculateOpenAITextGenerationCostInMillicents({
                        model,
                        response: call.result.response,
                    });
                }
                break;
            }
            case "transcription": {
                if (model == null) {
                    return null;
                }
                return calculateOpenAITranscriptionCostInMillicents({
                    model: model,
                    response: call.result
                        .response,
                });
            }
        }
        return null;
    }
}
