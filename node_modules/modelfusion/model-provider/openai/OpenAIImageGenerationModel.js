import { z } from "zod";
import { callWithRetryAndThrottle } from "../../core/api/callWithRetryAndThrottle.js";
import { createJsonResponseHandler, postJsonToApi, } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { PromptFormatImageGenerationModel } from "../../model-function/generate-image/PromptFormatImageGenerationModel.js";
import { OpenAIApiConfiguration } from "./OpenAIApiConfiguration.js";
import { failedOpenAICallResponseHandler } from "./OpenAIError.js";
/**
 * @see https://openai.com/pricing
 */
const sizeToCostInMillicents = {
    "1024x1024": 2000,
    "512x512": 1800,
    "256x256": 1600,
};
export const calculateOpenAIImageGenerationCostInMillicents = ({ settings, }) => (settings.n ?? 1) * sizeToCostInMillicents[settings.size ?? "1024x1024"];
/**
 * Create an image generation model that calls the OpenAI AI image creation API.
 *
 * @see https://platform.openai.com/docs/api-reference/images/create
 *
 * @example
 * const image = await generateImage(
 *   new OpenAIImageGenerationModel({ size: "512x512" }),
 *   "the wicked witch of the west in the style of early 19th century painting"
 * );
 */
export class OpenAIImageGenerationModel extends AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "openai"
        });
        Object.defineProperty(this, "modelName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
    }
    async callAPI(prompt, options) {
        const run = options?.run;
        const responseFormat = options?.responseFormat;
        const callSettings = {
            ...this.settings,
            user: this.settings.isUserIdForwardingEnabled ? run?.userId : undefined,
            abortSignal: run?.abortSignal,
            responseFormat,
            prompt,
        };
        return callWithRetryAndThrottle({
            retry: callSettings.api?.retry,
            throttle: callSettings.api?.throttle,
            call: async () => callOpenAIImageGenerationAPI(callSettings),
        });
    }
    get settingsForEvent() {
        const eventSettingProperties = [
            "n",
            "size",
        ];
        return Object.fromEntries(Object.entries(this.settings).filter(([key]) => eventSettingProperties.includes(key)));
    }
    async doGenerateImage(prompt, options) {
        const response = await this.callAPI(prompt, {
            responseFormat: OpenAIImageGenerationResponseFormat.base64Json,
            ...options,
        });
        return {
            response,
            base64Image: response.data[0].b64_json,
        };
    }
    withPromptFormat(promptFormat) {
        return new PromptFormatImageGenerationModel({
            model: this,
            promptFormat,
        });
    }
    withSettings(additionalSettings) {
        return new OpenAIImageGenerationModel(Object.assign({}, this.settings, additionalSettings));
    }
}
const openAIImageGenerationUrlSchema = z.object({
    created: z.number(),
    data: z.array(z.object({
        url: z.string(),
    })),
});
const openAIImageGenerationBase64JsonSchema = z.object({
    created: z.number(),
    data: z.array(z.object({
        b64_json: z.string(),
    })),
});
export const OpenAIImageGenerationResponseFormat = {
    url: {
        type: "url",
        handler: createJsonResponseHandler(openAIImageGenerationUrlSchema),
    },
    base64Json: {
        type: "b64_json",
        handler: createJsonResponseHandler(openAIImageGenerationBase64JsonSchema),
    },
};
async function callOpenAIImageGenerationAPI({ api = new OpenAIApiConfiguration(), abortSignal, prompt, n, size, responseFormat, user, }) {
    return postJsonToApi({
        url: api.assembleUrl("/images/generations"),
        headers: api.headers,
        body: {
            prompt,
            n,
            size,
            response_format: responseFormat.type,
            user,
        },
        failedResponseHandler: failedOpenAICallResponseHandler,
        successfulResponseHandler: responseFormat?.handler,
        abortSignal,
    });
}
