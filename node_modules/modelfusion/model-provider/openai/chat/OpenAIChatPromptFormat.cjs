"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapChatPromptToOpenAIChatFormat = exports.mapInstructionPromptToOpenAIChatFormat = void 0;
const validateChatPrompt_js_1 = require("../../../model-function/generate-text/validateChatPrompt.cjs");
/**
 * Formats an instruction prompt as an OpenAI chat prompt.
 */
function mapInstructionPromptToOpenAIChatFormat() {
    return {
        format: (instruction) => {
            const messages = [];
            if (instruction.system != null) {
                messages.push({
                    role: "system",
                    content: instruction.system,
                });
            }
            messages.push({
                role: "user",
                content: instruction.instruction,
            });
            if (instruction.input != null) {
                messages.push({
                    role: "user",
                    content: instruction.input,
                });
            }
            return messages;
        },
        stopSequences: [],
    };
}
exports.mapInstructionPromptToOpenAIChatFormat = mapInstructionPromptToOpenAIChatFormat;
/**
 * Formats a chat prompt as an OpenAI chat prompt.
 */
function mapChatPromptToOpenAIChatFormat() {
    return {
        format: (chatPrompt) => {
            (0, validateChatPrompt_js_1.validateChatPrompt)(chatPrompt);
            const messages = [];
            for (let i = 0; i < chatPrompt.length; i++) {
                const message = chatPrompt[i];
                // system message:
                if (i === 0 &&
                    "system" in message &&
                    typeof message.system === "string") {
                    messages.push({
                        role: "system",
                        content: message.system,
                    });
                    continue;
                }
                // user message
                if ("user" in message) {
                    messages.push({
                        role: "user",
                        content: message.user,
                    });
                    continue;
                }
                // ai message:
                if ("ai" in message) {
                    messages.push({
                        role: "assistant",
                        content: message.ai,
                    });
                    continue;
                }
                // unsupported message:
                throw new Error(`Unsupported message: ${JSON.stringify(message)}`);
            }
            return messages;
        },
        stopSequences: [],
    };
}
exports.mapChatPromptToOpenAIChatFormat = mapChatPromptToOpenAIChatFormat;
