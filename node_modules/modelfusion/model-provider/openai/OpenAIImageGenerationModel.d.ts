import { z } from "zod";
import { FunctionOptions } from "../../core/FunctionOptions.js";
import { ApiConfiguration } from "../../core/api/ApiConfiguration.js";
import { ResponseHandler } from "../../core/api/postToApi.js";
import { AbstractModel } from "../../model-function/AbstractModel.js";
import { PromptFormat } from "../../model-function/PromptFormat.js";
import { ImageGenerationModel, ImageGenerationModelSettings } from "../../model-function/generate-image/ImageGenerationModel.js";
import { PromptFormatImageGenerationModel } from "../../model-function/generate-image/PromptFormatImageGenerationModel.js";
export interface OpenAIImageGenerationCallSettings {
    n?: number;
    size?: "256x256" | "512x512" | "1024x1024";
}
export declare const calculateOpenAIImageGenerationCostInMillicents: ({ settings, }: {
    settings: OpenAIImageGenerationSettings;
}) => number;
export interface OpenAIImageGenerationSettings extends ImageGenerationModelSettings, OpenAIImageGenerationCallSettings {
    api?: ApiConfiguration;
    isUserIdForwardingEnabled?: boolean;
}
/**
 * Create an image generation model that calls the OpenAI AI image creation API.
 *
 * @see https://platform.openai.com/docs/api-reference/images/create
 *
 * @example
 * const image = await generateImage(
 *   new OpenAIImageGenerationModel({ size: "512x512" }),
 *   "the wicked witch of the west in the style of early 19th century painting"
 * );
 */
export declare class OpenAIImageGenerationModel extends AbstractModel<OpenAIImageGenerationSettings> implements ImageGenerationModel<string, OpenAIImageGenerationSettings> {
    constructor(settings: OpenAIImageGenerationSettings);
    readonly provider: "openai";
    readonly modelName: null;
    callAPI<RESULT>(prompt: string, options: {
        responseFormat: OpenAIImageGenerationResponseFormatType<RESULT>;
    } & FunctionOptions): Promise<RESULT>;
    get settingsForEvent(): Partial<OpenAIImageGenerationSettings>;
    doGenerateImage(prompt: string, options?: FunctionOptions): Promise<{
        response: {
            data: {
                b64_json: string;
            }[];
            created: number;
        };
        base64Image: string;
    }>;
    withPromptFormat<INPUT_PROMPT>(promptFormat: PromptFormat<INPUT_PROMPT, string>): PromptFormatImageGenerationModel<INPUT_PROMPT, string, OpenAIImageGenerationSettings, this>;
    withSettings(additionalSettings: Partial<OpenAIImageGenerationSettings>): this;
}
export type OpenAIImageGenerationResponseFormatType<T> = {
    type: "b64_json" | "url";
    handler: ResponseHandler<T>;
};
declare const openAIImageGenerationUrlSchema: z.ZodObject<{
    created: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        url: string;
    }[];
    created: number;
}, {
    data: {
        url: string;
    }[];
    created: number;
}>;
export type OpenAIImageGenerationUrlResponse = z.infer<typeof openAIImageGenerationUrlSchema>;
declare const openAIImageGenerationBase64JsonSchema: z.ZodObject<{
    created: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        b64_json: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        b64_json: string;
    }, {
        b64_json: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        b64_json: string;
    }[];
    created: number;
}, {
    data: {
        b64_json: string;
    }[];
    created: number;
}>;
export type OpenAIImageGenerationBase64JsonResponse = z.infer<typeof openAIImageGenerationBase64JsonSchema>;
export declare const OpenAIImageGenerationResponseFormat: {
    url: {
        type: "url";
        handler: ResponseHandler<{
            data: {
                url: string;
            }[];
            created: number;
        }>;
    };
    base64Json: {
        type: "b64_json";
        handler: ResponseHandler<{
            data: {
                b64_json: string;
            }[];
            created: number;
        }>;
    };
};
export {};
