"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElevenLabsSpeechSynthesisModel = void 0;
const callWithRetryAndThrottle_js_1 = require("../../core/api/callWithRetryAndThrottle.cjs");
const postToApi_js_1 = require("../../core/api/postToApi.cjs");
const AbstractModel_js_1 = require("../../model-function/AbstractModel.cjs");
const ElevenLabsApiConfiguration_js_1 = require("./ElevenLabsApiConfiguration.cjs");
const ElevenLabsError_js_1 = require("./ElevenLabsError.cjs");
/**
 * Synthesize speech using the ElevenLabs Text to Speech API.
 *
 * @see https://api.elevenlabs.io/docs#/text-to-speech/Text_to_speech_v1_text_to_speech__voice_id__post
 */
class ElevenLabsSpeechSynthesisModel extends AbstractModel_js_1.AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "elevenlabs"
        });
    }
    get modelName() {
        return this.settings.voice;
    }
    async callAPI(text, options) {
        return (0, callWithRetryAndThrottle_js_1.callWithRetryAndThrottle)({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callElevenLabsTextToSpeechAPI({
                api: this.settings.api,
                abortSignal: options?.run?.abortSignal,
                text,
                voiceId: this.settings.voice,
                modelId: this.settings.model,
                voiceSettings: this.settings.voiceSettings,
            }),
        });
    }
    get settingsForEvent() {
        return {
            model: this.settings.model,
            voice: this.settings.voice,
            voiceSettings: this.settings.voiceSettings,
        };
    }
    generateSpeechResponse(text, options) {
        return this.callAPI(text, options);
    }
    withSettings(additionalSettings) {
        return new ElevenLabsSpeechSynthesisModel({
            ...this.settings,
            ...additionalSettings,
        });
    }
}
exports.ElevenLabsSpeechSynthesisModel = ElevenLabsSpeechSynthesisModel;
async function callElevenLabsTextToSpeechAPI({ api = new ElevenLabsApiConfiguration_js_1.ElevenLabsApiConfiguration(), abortSignal, text, voiceId, modelId, voiceSettings, }) {
    return (0, postToApi_js_1.postJsonToApi)({
        url: api.assembleUrl(`/text-to-speech/${voiceId}`),
        headers: api.headers,
        body: {
            text,
            model_id: modelId,
            voice_settings: voiceSettings != null
                ? {
                    stability: voiceSettings.stability,
                    similarity_boost: voiceSettings.similarityBoost,
                    style: voiceSettings.style,
                    use_speaker_boost: voiceSettings.useSpeakerBoost,
                }
                : undefined,
        },
        failedResponseHandler: ElevenLabsError_js_1.failedElevenLabsCallResponseHandler,
        successfulResponseHandler: (0, postToApi_js_1.createAudioMpegResponseHandler)(),
        abortSignal,
    });
}
