"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmntSpeechSynthesisModel = void 0;
const AbstractModel_js_1 = require("../../model-function/AbstractModel.cjs");
const callWithRetryAndThrottle_js_1 = require("../../core/api/callWithRetryAndThrottle.cjs");
const postToApi_js_1 = require("../../core/api/postToApi.cjs");
const LmntApiConfiguration_js_1 = require("./LmntApiConfiguration.cjs");
const LmntError_js_1 = require("./LmntError.cjs");
/**
 * Synthesize speech using the LMNT API.
 *
 * @see https://www.lmnt.com/docs/rest/#synthesize-speech
 */
class LmntSpeechSynthesisModel extends AbstractModel_js_1.AbstractModel {
    constructor(settings) {
        super({ settings });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "lmnt"
        });
    }
    get modelName() {
        return this.settings.voice;
    }
    async callAPI(text, options) {
        return (0, callWithRetryAndThrottle_js_1.callWithRetryAndThrottle)({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callLmntTextToSpeechAPI({
                ...this.settings,
                abortSignal: options?.run?.abortSignal,
                text,
            }),
        });
    }
    get settingsForEvent() {
        return {
            voice: this.settings.voice,
            speed: this.settings.speed,
            seed: this.settings.seed,
            length: this.settings.length,
        };
    }
    generateSpeechResponse(text, options) {
        return this.callAPI(text, options);
    }
    withSettings(additionalSettings) {
        return new LmntSpeechSynthesisModel({
            ...this.settings,
            ...additionalSettings,
        });
    }
}
exports.LmntSpeechSynthesisModel = LmntSpeechSynthesisModel;
async function callLmntTextToSpeechAPI({ api = new LmntApiConfiguration_js_1.LmntApiConfiguration(), abortSignal, text, voice, speed, seed, length, }) {
    const formData = new FormData();
    formData.append("text", text);
    formData.append("voice", voice);
    formData.append("format", "mp3");
    if (speed != null)
        formData.append("speed", speed.toString());
    if (seed != null)
        formData.append("seed", seed.toString());
    if (length != null)
        formData.append("length", length.toString());
    return (0, postToApi_js_1.postToApi)({
        url: api.assembleUrl(`/synthesize`),
        headers: api.headers,
        body: {
            content: formData,
            values: {
                text,
                voice,
                speed,
                seed,
                length,
            },
        },
        failedResponseHandler: LmntError_js_1.failedLmntCallResponseHandler,
        successfulResponseHandler: (0, postToApi_js_1.createAudioMpegResponseHandler)(),
        abortSignal,
    });
}
