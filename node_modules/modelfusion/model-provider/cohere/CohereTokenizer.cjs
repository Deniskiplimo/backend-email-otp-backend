"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CohereTokenizer = void 0;
const zod_1 = require("zod");
const callWithRetryAndThrottle_js_1 = require("../../core/api/callWithRetryAndThrottle.cjs");
const postToApi_js_1 = require("../../core/api/postToApi.cjs");
const CohereError_js_1 = require("./CohereError.cjs");
const CohereApiConfiguration_js_1 = require("./CohereApiConfiguration.cjs");
/**
 * Tokenizer for the Cohere models. It uses the Co.Tokenize and Co.Detokenize APIs.
 *
 * @see https://docs.cohere.com/reference/tokenize
 * @see https://docs.cohere.com/reference/detokenize-1
 *
 * @example
 * const tokenizer = new CohereTokenizer({ model: "command-nightly" });
 *
 * const text = "At first, Nox didn't know what to do with the pup.";
 *
 * const tokenCount = await countTokens(tokenizer, text);
 * const tokens = await tokenizer.tokenize(text);
 * const tokensAndTokenTexts = await tokenizer.tokenizeWithTexts(text);
 * const reconstructedText = await tokenizer.detokenize(tokens);
 */
class CohereTokenizer {
    constructor(settings) {
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.settings = settings;
    }
    async callTokenizeAPI(text, context) {
        return (0, callWithRetryAndThrottle_js_1.callWithRetryAndThrottle)({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callCohereTokenizeAPI({
                abortSignal: context?.abortSignal,
                text,
                ...this.settings,
            }),
        });
    }
    async callDeTokenizeAPI(tokens, context) {
        return (0, callWithRetryAndThrottle_js_1.callWithRetryAndThrottle)({
            retry: this.settings.api?.retry,
            throttle: this.settings.api?.throttle,
            call: async () => callCohereDetokenizeAPI({
                abortSignal: context?.abortSignal,
                tokens,
                ...this.settings,
            }),
        });
    }
    async tokenize(text) {
        return (await this.tokenizeWithTexts(text)).tokens;
    }
    async tokenizeWithTexts(text) {
        const response = await this.callTokenizeAPI(text);
        return {
            tokens: response.tokens,
            tokenTexts: response.token_strings,
        };
    }
    async detokenize(tokens) {
        const response = await this.callDeTokenizeAPI(tokens);
        return response.text;
    }
}
exports.CohereTokenizer = CohereTokenizer;
const cohereDetokenizationResponseSchema = zod_1.z.object({
    text: zod_1.z.string(),
    meta: zod_1.z.object({
        api_version: zod_1.z.object({
            version: zod_1.z.string(),
        }),
    }),
});
async function callCohereDetokenizeAPI({ api = new CohereApiConfiguration_js_1.CohereApiConfiguration(), abortSignal, model, tokens, }) {
    return (0, postToApi_js_1.postJsonToApi)({
        url: api.assembleUrl(`/detokenize`),
        headers: api.headers,
        body: {
            model,
            tokens,
        },
        failedResponseHandler: CohereError_js_1.failedCohereCallResponseHandler,
        successfulResponseHandler: (0, postToApi_js_1.createJsonResponseHandler)(cohereDetokenizationResponseSchema),
        abortSignal,
    });
}
const cohereTokenizationResponseSchema = zod_1.z.object({
    tokens: zod_1.z.array(zod_1.z.number()),
    token_strings: zod_1.z.array(zod_1.z.string()),
    meta: zod_1.z.object({
        api_version: zod_1.z.object({
            version: zod_1.z.string(),
        }),
    }),
});
async function callCohereTokenizeAPI({ api = new CohereApiConfiguration_js_1.CohereApiConfiguration(), abortSignal, model, text, }) {
    return (0, postToApi_js_1.postJsonToApi)({
        url: api.assembleUrl(`/tokenize`),
        headers: api.headers,
        body: {
            model,
            text,
        },
        failedResponseHandler: CohereError_js_1.failedCohereCallResponseHandler,
        successfulResponseHandler: (0, postToApi_js_1.createJsonResponseHandler)(cohereTokenizationResponseSchema),
        abortSignal,
    });
}
