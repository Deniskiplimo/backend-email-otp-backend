"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.failedCohereCallResponseHandler = exports.CohereError = exports.cohereErrorDataSchema = void 0;
const zod_1 = require("zod");
const ApiCallError_js_1 = require("../../core/api/ApiCallError.cjs");
const parseJSON_js_1 = require("../../util/parseJSON.cjs");
exports.cohereErrorDataSchema = zod_1.z.object({
    message: zod_1.z.string(),
});
class CohereError extends ApiCallError_js_1.ApiCallError {
    constructor({ data, statusCode, url, requestBodyValues, message = data.message, }) {
        super({ message, statusCode, requestBodyValues, url });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = data;
    }
}
exports.CohereError = CohereError;
const failedCohereCallResponseHandler = async ({ response, url, requestBodyValues }) => {
    const responseBody = await response.text();
    // For some errors, the body of Cohere responses is empty:
    if (responseBody.trim() === "") {
        return new CohereError({
            url,
            requestBodyValues,
            statusCode: response.status,
            data: {
                message: response.statusText,
            },
        });
    }
    const parsedError = (0, parseJSON_js_1.parseJsonWithZod)(responseBody, exports.cohereErrorDataSchema);
    return new CohereError({
        url,
        requestBodyValues,
        statusCode: response.status,
        data: parsedError,
    });
};
exports.failedCohereCallResponseHandler = failedCohereCallResponseHandler;
