type OutputResult<INPUT, OUTPUT> = {
    type: "value";
    input: INPUT;
    output: OUTPUT;
    error?: undefined;
} | {
    type: "error";
    input: INPUT;
    output?: undefined;
    error: unknown;
};
export type OutputValidator<INPUT, OUTPUT> = ({ type, input, output, error, }: OutputResult<INPUT, OUTPUT>) => PromiseLike<boolean>;
export type Guard<INPUT, OUTPUT> = ({ type, input, output, error, }: OutputResult<INPUT, OUTPUT>) => PromiseLike<{
    action: "retry";
    input: INPUT;
} | {
    action: "return";
    output: OUTPUT;
} | {
    action: "throwError";
    error: unknown;
} | {
    action: "passThrough";
} | undefined>;
export declare function guard<INPUT, OUTPUT>(execute: (input: INPUT) => PromiseLike<OUTPUT>, input: INPUT, guards: Guard<INPUT, OUTPUT> | Array<Guard<INPUT, OUTPUT>>, options?: {
    maxRetries: number;
}): Promise<OUTPUT | undefined>;
export {};
