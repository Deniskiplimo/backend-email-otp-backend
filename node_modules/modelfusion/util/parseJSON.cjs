"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeParseJsonWithSchema = exports.safeParseJsonWithZod = exports.parseJsonWithZod = void 0;
const secure_json_parse_1 = __importDefault(require("secure-json-parse"));
const JSONParseError_js_1 = require("./JSONParseError.cjs");
function parseJsonWithZod(json, schema) {
    try {
        const parsedJson = secure_json_parse_1.default.parse(json);
        return schema.parse(parsedJson);
    }
    catch (error) {
        throw new JSONParseError_js_1.JSONParseError({
            valueText: json,
            cause: error,
        });
    }
}
exports.parseJsonWithZod = parseJsonWithZod;
function safeParseJsonWithZod(json, schema) {
    try {
        const parsedJson = secure_json_parse_1.default.parse(json);
        const validationResult = schema.safeParse(parsedJson);
        if (validationResult.success) {
            return validationResult;
        }
        return {
            success: false,
            error: new JSONParseError_js_1.JSONParseError({
                valueText: json,
                cause: validationResult.error,
            }),
        };
    }
    catch (error) {
        throw new JSONParseError_js_1.JSONParseError({
            valueText: json,
            cause: error,
        });
    }
}
exports.safeParseJsonWithZod = safeParseJsonWithZod;
function safeParseJsonWithSchema(json, schema) {
    try {
        const parsedJson = secure_json_parse_1.default.parse(json);
        const validationResult = schema.validate(parsedJson);
        if (validationResult.success) {
            return validationResult;
        }
        return {
            success: false,
            error: new JSONParseError_js_1.JSONParseError({
                valueText: json,
                cause: validationResult.error,
            }),
        };
    }
    catch (error) {
        throw new JSONParseError_js_1.JSONParseError({
            valueText: json,
            cause: error,
        });
    }
}
exports.safeParseJsonWithSchema = safeParseJsonWithSchema;
