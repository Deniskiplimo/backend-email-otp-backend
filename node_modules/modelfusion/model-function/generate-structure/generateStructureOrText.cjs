"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateStructureOrText = void 0;
const executeCall_js_1 = require("../executeCall.cjs");
const ModelFunctionPromise_js_1 = require("../ModelFunctionPromise.cjs");
const NoSuchStructureError_js_1 = require("./NoSuchStructureError.cjs");
const StructureValidationError_js_1 = require("./StructureValidationError.cjs");
function generateStructureOrText(model, structureDefinitions, prompt, options) {
    // Note: PROMPT must not be a function.
    const expandedPrompt = typeof prompt === "function"
        ? prompt(structureDefinitions)
        : prompt;
    return new ModelFunctionPromise_js_1.ModelFunctionPromise((0, executeCall_js_1.executeCall)({
        functionType: "structure-or-text-generation",
        input: expandedPrompt,
        model,
        options,
        generateResponse: async (options) => {
            const result = await model.doGenerateStructureOrText(structureDefinitions, expandedPrompt, options);
            const { structure, value, text } = result.structureAndText;
            // text generation:
            if (structure == null) {
                return {
                    response: result.response,
                    extractedValue: { structure, value, text },
                    usage: result.usage,
                };
            }
            const definition = structureDefinitions.find((d) => d.name === structure);
            if (definition == undefined) {
                throw new NoSuchStructureError_js_1.NoSuchStructureError(structure);
            }
            const parseResult = definition.schema.validate(value);
            if (!parseResult.success) {
                throw new StructureValidationError_js_1.StructureValidationError({
                    structureName: structure,
                    value,
                    valueText: result.structureAndText.valueText,
                    cause: parseResult.error,
                });
            }
            return {
                response: result.response,
                extractedValue: {
                    structure: structure,
                    value: parseResult.data,
                    text: text, // text is string | null, which is part of the response for schema values
                },
                usage: result.usage,
            };
        },
    }));
}
exports.generateStructureOrText = generateStructureOrText;
