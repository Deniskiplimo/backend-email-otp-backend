import { FunctionOptions } from "../../core/FunctionOptions.js";
import { StructureDefinition } from "../../core/structure/StructureDefinition.js";
import { ModelFunctionPromise } from "../ModelFunctionPromise.js";
import { StructureOrTextGenerationModel, StructureOrTextGenerationModelSettings } from "./StructureOrTextGenerationModel.js";
type StructureDefinitionArray<T extends StructureDefinition<any, any>[]> = T;
type ToStructureDefinitionMap<T extends StructureDefinitionArray<StructureDefinition<any, any>[]>> = {
    [K in T[number]["name"]]: Extract<T[number], StructureDefinition<K, any>>;
};
type ToStructureUnion<T> = {
    [KEY in keyof T]: T[KEY] extends StructureDefinition<any, infer STRUCTURE> ? {
        structure: KEY;
        value: STRUCTURE;
        text: string | null;
    } : never;
}[keyof T];
type ToOutputValue<STRUCTURES extends StructureDefinitionArray<StructureDefinition<any, any>[]>> = ToStructureUnion<ToStructureDefinitionMap<STRUCTURES>>;
export declare function generateStructureOrText<STRUCTURES extends StructureDefinition<any, any>[], PROMPT>(model: StructureOrTextGenerationModel<PROMPT, StructureOrTextGenerationModelSettings>, structureDefinitions: STRUCTURES, prompt: PROMPT | ((structureDefinitions: STRUCTURES) => PROMPT), options?: FunctionOptions): ModelFunctionPromise<{
    structure: null;
    value: null;
    text: string;
} | ToOutputValue<STRUCTURES>>;
export {};
