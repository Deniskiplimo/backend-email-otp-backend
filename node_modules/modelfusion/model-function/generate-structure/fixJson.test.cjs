"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_assert_1 = __importDefault(require("node:assert"));
const vitest_1 = require("vitest");
const fixJson_js_1 = require("./fixJson.cjs");
(0, vitest_1.test)("should handle empty input", () => {
    node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)(""), "");
});
(0, vitest_1.describe)("literals", () => {
    (0, vitest_1.test)("should handle incomplete null", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("nul"), "null");
    });
    (0, vitest_1.test)("should handle incomplete true", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("t"), "true");
    });
    (0, vitest_1.test)("should handle incomplete false", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("fals"), "false");
    });
});
(0, vitest_1.describe)("number", () => {
    (0, vitest_1.test)("should handle incomplete numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("12."), "12");
    });
    (0, vitest_1.test)("should handle numbers with dot", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("12.2"), "12.2");
    });
    (0, vitest_1.test)("should handle negative numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("-12"), "-12");
    });
    (0, vitest_1.test)("should handle incomplete negative numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("-"), "");
    });
    (0, vitest_1.test)("should handle e-notation numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5e"), "2.5");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5e-"), "2.5");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5e3"), "2.5e3");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("-2.5e3"), "-2.5e3");
    });
    (0, vitest_1.test)("should handle uppercase e-notation numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5E"), "2.5");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5E-"), "2.5");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("2.5E3"), "2.5E3");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("-2.5E3"), "-2.5E3");
    });
    (0, vitest_1.test)("should handle incomplete numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("12.e"), "12");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("12.34e"), "12.34");
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("5e"), "5");
    });
});
(0, vitest_1.describe)("string", () => {
    (0, vitest_1.test)("should handle incomplete strings", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('"abc'), '"abc"');
    });
    (0, vitest_1.test)("should handle escape sequences", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('"value with \\"quoted\\" text and \\\\ escape'), '"value with \\"quoted\\" text and \\\\ escape"');
    });
    (0, vitest_1.test)("should handle incomplete escape sequences", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('"value with \\'), '"value with "');
    });
    (0, vitest_1.test)("should handle unicode characters", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('"value with unicode \u003C"'), '"value with unicode \u003C"');
    });
});
(0, vitest_1.describe)("array", () => {
    (0, vitest_1.test)("should handle incomplete array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("["), "[]");
    });
    (0, vitest_1.test)("should handle closing bracket after number in array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[[1], [2"), "[[1], [2]]");
    });
    (0, vitest_1.test)("should handle closing bracket after string in array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)(`[["1"], ["2`), `[["1"], ["2"]]`);
    });
    (0, vitest_1.test)("should handle closing bracket after literal in array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[[false], [nu"), "[[false], [null]]");
    });
    (0, vitest_1.test)("should handle closing bracket after array in array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[[[]], [[]"), "[[[]], [[]]]");
    });
    (0, vitest_1.test)("should handle closing bracket after object in array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[[{}], [{"), "[[{}], [{}]]");
    });
    (0, vitest_1.test)("should handle trailing comma", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[1, "), "[1]");
    });
    (0, vitest_1.test)("should handle closing array", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[[], 123"), "[[], 123]");
    });
});
(0, vitest_1.describe)("object", () => {
    (0, vitest_1.test)("should handle keys without values", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key":'), "{}");
    });
    (0, vitest_1.test)("should handle closing brace after number in object", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": 1}, "c": {"d": 2'), '{"a": {"b": 1}, "c": {"d": 2}}');
    });
    (0, vitest_1.test)("should handle closing brace after string in object", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": "1"}, "c": {"d": 2'), '{"a": {"b": "1"}, "c": {"d": 2}}');
    });
    (0, vitest_1.test)("should handle closing brace after literal in object", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": false}, "c": {"d": 2'), '{"a": {"b": false}, "c": {"d": 2}}');
    });
    (0, vitest_1.test)("should handle closing brace after array in object", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": []}, "c": {"d": 2'), '{"a": {"b": []}, "c": {"d": 2}}');
    });
    (0, vitest_1.test)("should handle closing brace after object in object", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": {}}, "c": {"d": 2'), '{"a": {"b": {}}, "c": {"d": 2}}');
    });
    (0, vitest_1.test)("should handle partial keys (first key)", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"ke'), "{}");
    });
    (0, vitest_1.test)("should handle partial keys (second key)", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"k1": 1, "k2'), '{"k1": 1}');
    });
    (0, vitest_1.test)("should handle partial keys with colon (second key)", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"k1": 1, "k2":'), '{"k1": 1}');
    });
    (0, vitest_1.test)("should handle trailing whitespaces", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key": "value"  '), '{"key": "value"}');
    });
});
(0, vitest_1.describe)("nesting", () => {
    (0, vitest_1.test)("should handle nested arrays with numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[1, [2, 3, ["), "[1, [2, 3, []]]");
    });
    (0, vitest_1.test)("should handle nested arrays with literals", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)("[false, [true, ["), "[false, [true, []]]");
    });
    (0, vitest_1.test)("should handle nested objects", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key": {"subKey":'), '{"key": {}}');
    });
    (0, vitest_1.test)("should handle nested objects with numbers", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key": 123, "key2": {"subKey":'), '{"key": 123, "key2": {}}');
    });
    (0, vitest_1.test)("should handle nested objects with literals", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key": null, "key2": {"subKey":'), '{"key": null, "key2": {}}');
    });
    (0, vitest_1.test)("should handle arrays within objects", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"key": [1, 2, {'), '{"key": [1, 2, {}]}');
    });
    (0, vitest_1.test)("should handle objects within arrays", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('[1, 2, {"key": "value",'), '[1, 2, {"key": "value"}]');
    });
    (0, vitest_1.test)("should handle nested arrays and objects", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": ["c", {"d": "e",'), '{"a": {"b": ["c", {"d": "e"}]}}');
    });
    (0, vitest_1.test)("should handle deeply nested structures", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": {"b": {"c": {"d":'), '{"a": {"b": {"c": {}}}}');
    });
    (0, vitest_1.test)("should handle potential nested arrays or objects", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": 1, "b": ['), '{"a": 1, "b": []}');
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": 1, "b": {'), '{"a": 1, "b": {}}');
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)('{"a": 1, "b": "'), '{"a": 1, "b": ""}');
    });
});
(0, vitest_1.describe)("regression", () => {
    (0, vitest_1.test)("should handle complex nesting 1", () => {
        node_assert_1.default.strictEqual((0, fixJson_js_1.fixJson)([
            "{",
            '  "a": [',
            "    {",
            '      "a1": "v1",',
            '      "a2": "v2",',
            `      "a3": "v3"`,
            "    }",
            "  ],",
            '  "b": [',
            "    {",
            '      "b1": "n',
        ].join("\n")), [
            "{",
            '  "a": [',
            "    {",
            '      "a1": "v1",',
            '      "a2": "v2",',
            `      "a3": "v3"`,
            "    }",
            "  ],",
            '  "b": [',
            "    {",
            '      "b1": "n"}]}',
        ].join("\n"));
    });
});
