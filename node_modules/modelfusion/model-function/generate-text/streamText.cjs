"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamText = void 0;
const nanoid_1 = require("nanoid");
const FunctionEventSource_js_1 = require("../../core/FunctionEventSource.cjs");
const GlobalFunctionLogging_js_1 = require("../../core/GlobalFunctionLogging.cjs");
const GlobalFunctionObservers_js_1 = require("../../core/GlobalFunctionObservers.cjs");
const AbortError_js_1 = require("../../core/api/AbortError.cjs");
const getFunctionCallLogger_js_1 = require("../../core/getFunctionCallLogger.cjs");
const getRun_js_1 = require("../../core/getRun.cjs");
const DurationMeasurement_js_1 = require("../../util/DurationMeasurement.cjs");
const runSafe_js_1 = require("../../util/runSafe.cjs");
const AsyncIterableResultPromise_js_1 = require("../AsyncIterableResultPromise.cjs");
function streamText(model, prompt, options) {
    return new AsyncIterableResultPromise_js_1.AsyncIterableResultPromise(doStreamText(model, prompt, options));
}
exports.streamText = streamText;
async function doStreamText(model, prompt, options) {
    const run = await (0, getRun_js_1.getRun)(options?.run);
    const eventSource = new FunctionEventSource_js_1.FunctionEventSource({
        observers: [
            ...(0, getFunctionCallLogger_js_1.getFunctionCallLogger)(options?.logging ?? (0, GlobalFunctionLogging_js_1.getGlobalFunctionLogging)()),
            ...(0, GlobalFunctionObservers_js_1.getGlobalFunctionObservers)(),
            ...(model.settings.observers ?? []),
            ...(run?.functionObserver != null ? [run.functionObserver] : []),
            ...(options?.observers ?? []),
        ],
        errorHandler: run?.errorHandler,
    });
    const durationMeasurement = (0, DurationMeasurement_js_1.startDurationMeasurement)();
    const startMetadata = {
        functionType: "text-streaming",
        callId: `call-${(0, nanoid_1.nanoid)()}`,
        runId: run?.runId,
        sessionId: run?.sessionId,
        userId: run?.userId,
        functionId: options?.functionId,
        model: model.modelInformation,
        settings: model.settingsForEvent,
        input: prompt,
        timestamp: durationMeasurement.startDate,
        startTimestamp: durationMeasurement.startDate,
    };
    eventSource.notify({
        eventType: "started",
        ...startMetadata,
    });
    const result = await (0, runSafe_js_1.runSafe)(async () => {
        const deltaIterable = await model.doStreamText(prompt, {
            functionId: options?.functionId,
            logging: options?.logging,
            observers: options?.observers,
            run,
        });
        return (async function* () {
            let accumulatedText = "";
            let lastFullDelta;
            for await (const event of deltaIterable) {
                if (event?.type === "error") {
                    const error = event.error;
                    const finishMetadata = {
                        eventType: "finished",
                        ...startMetadata,
                        finishTimestamp: new Date(),
                        durationInMs: durationMeasurement.durationInMs,
                    };
                    eventSource.notify(error instanceof AbortError_js_1.AbortError
                        ? {
                            ...finishMetadata,
                            result: {
                                status: "abort",
                            },
                        }
                        : {
                            ...finishMetadata,
                            result: {
                                status: "error",
                                error,
                            },
                        });
                    throw error;
                }
                if (event?.type === "delta") {
                    lastFullDelta = event.fullDelta;
                    const textDelta = event.valueDelta;
                    if (textDelta != null && textDelta.length > 0) {
                        accumulatedText += textDelta;
                        yield textDelta;
                    }
                }
            }
            const finishMetadata = {
                eventType: "finished",
                ...startMetadata,
                finishTimestamp: new Date(),
                durationInMs: durationMeasurement.durationInMs,
            };
            eventSource.notify({
                ...finishMetadata,
                result: {
                    status: "success",
                    response: lastFullDelta,
                    value: accumulatedText,
                },
            });
        })();
    });
    if (!result.ok) {
        const finishMetadata = {
            eventType: "finished",
            ...startMetadata,
            finishTimestamp: new Date(),
            durationInMs: durationMeasurement.durationInMs,
        };
        if (result.isAborted) {
            eventSource.notify({
                ...finishMetadata,
                result: {
                    status: "abort",
                },
            });
            throw new AbortError_js_1.AbortError();
        }
        eventSource.notify({
            ...finishMetadata,
            result: {
                status: "error",
                error: result.error,
            },
        });
        throw result.error;
    }
    return {
        output: result.value,
        metadata: startMetadata,
    };
}
