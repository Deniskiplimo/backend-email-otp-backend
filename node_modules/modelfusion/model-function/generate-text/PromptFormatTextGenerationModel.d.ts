import { FunctionOptions } from "../../core/FunctionOptions.js";
import { TextGenerationModel, TextGenerationModelSettings } from "./TextGenerationModel.js";
import { TextGenerationPromptFormat } from "./TextGenerationPromptFormat.js";
export declare class PromptFormatTextGenerationModel<PROMPT, MODEL_PROMPT, SETTINGS extends TextGenerationModelSettings, MODEL extends TextGenerationModel<MODEL_PROMPT, SETTINGS>> implements TextGenerationModel<PROMPT, SETTINGS> {
    readonly model: MODEL;
    readonly promptFormat: TextGenerationPromptFormat<PROMPT, MODEL_PROMPT>;
    constructor({ model, promptFormat, }: {
        model: MODEL;
        promptFormat: TextGenerationPromptFormat<PROMPT, MODEL_PROMPT>;
    });
    get modelInformation(): import("../ModelInformation.js").ModelInformation;
    get settings(): SETTINGS;
    get tokenizer(): MODEL["tokenizer"];
    get contextWindowSize(): MODEL["contextWindowSize"];
    get countPromptTokens(): MODEL["countPromptTokens"] extends undefined ? undefined : (prompt: PROMPT) => PromiseLike<number>;
    doGenerateText(prompt: PROMPT, options?: FunctionOptions): PromiseLike<{
        response: unknown;
        text: string;
        usage?: {
            promptTokens: number;
            completionTokens: number;
            totalTokens: number;
        } | undefined;
    }>;
    get settingsForEvent(): Partial<SETTINGS>;
    withPromptFormat<INPUT_PROMPT>(promptFormat: TextGenerationPromptFormat<INPUT_PROMPT, PROMPT>): PromptFormatTextGenerationModel<INPUT_PROMPT, PROMPT, SETTINGS, this>;
    withSettings(additionalSettings: Partial<SETTINGS>): this;
}
