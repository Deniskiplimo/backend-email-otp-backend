"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRun = exports.getRun = void 0;
let runStorage;
const isNode = typeof process !== "undefined" &&
    process.versions != null &&
    process.versions.node != null;
async function ensureLoaded() {
    if (!isNode)
        return Promise.resolve();
    if (!runStorage) {
        const { AsyncLocalStorage } = await Promise.resolve().then(() => __importStar(require("node:async_hooks")));
        runStorage = new AsyncLocalStorage();
    }
    return Promise.resolve();
}
/**
 * Returns the run stored in an AsyncLocalStorage if running in Node.js. It can be set with `withRun()`.
 */
async function getRun(run) {
    await ensureLoaded();
    return run ?? runStorage?.getStore();
}
exports.getRun = getRun;
/**
 * Stores the run in an AsyncLocalStorage if running in Node.js. It can be retrieved with `getRun()`.
 */
async function withRun(run, callback) {
    await ensureLoaded();
    if (runStorage != null) {
        await runStorage.run(run, () => callback(run));
    }
    else {
        await callback(run);
    }
}
exports.withRun = withRun;
