"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.summarizeRecursivelyWithTextGenerationAndTokenSplitting = void 0;
const generateText_js_1 = require("../../model-function/generate-text/generateText.cjs");
const splitRecursively_js_1 = require("../../text-chunk/split/splitRecursively.cjs");
const summarizeRecursively_js_1 = require("./summarizeRecursively.cjs");
/**
 * Recursively summarizes a text using a text generation model, e.g. for summarization or text extraction.
 * It automatically splits the text into optimal chunks that are small enough to be processed by the model,
 * while leaving enough space for the model to generate text.
 */
async function summarizeRecursivelyWithTextGenerationAndTokenSplitting({ text, model, prompt, tokenLimit = model.contextWindowSize -
    (model.settings.maxCompletionTokens ?? model.contextWindowSize / 4), join, }, options) {
    const emptyPromptTokens = await model.countPromptTokens(await prompt({ text: "" }));
    return (0, summarizeRecursively_js_1.summarizeRecursively)({
        split: (0, splitRecursively_js_1.splitAtToken)({
            tokenizer: model.tokenizer,
            maxTokensPerChunk: tokenLimit - emptyPromptTokens,
        }),
        summarize: async (input) => (0, generateText_js_1.generateText)(model, await prompt(input), options),
        join,
        text,
    }, options);
}
exports.summarizeRecursivelyWithTextGenerationAndTokenSplitting = summarizeRecursivelyWithTextGenerationAndTokenSplitting;
