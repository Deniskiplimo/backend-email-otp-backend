"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tool = void 0;
const InvalidToolNameError_js_1 = require("./InvalidToolNameError.cjs");
const namePattern = /^[a-zA-Z0-9_-]{1,64}$/;
/**
 * A tool is a function with a name, description and defined inputs that can be used
 * by agents and chatbots.
 */
class Tool {
    constructor({ name, description, inputSchema, outputSchema, execute, }) {
        /**
         * The name of the tool.
         * It has to be a function name that matches the regular expression pattern '^[a-zA-Z0-9_-]{1,64}$'.
         * Should be understandable for language models and unique among the tools that they know.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A description of what the tool does. Will be used by the language model to decide whether to use the tool.
         */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The schema of the input that the tool expects. The language model will use this to generate the input.
         * Use descriptions to make the input understandable for the language model.
         */
        Object.defineProperty(this, "inputSchema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An optional schema of the output that the tool produces. This will be used to validate the output.
         */
        Object.defineProperty(this, "outputSchema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The actual execution function of the tool.
         */
        Object.defineProperty(this, "execute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // check that the name is a valid function name:
        if (!namePattern.test(name)) {
            throw new InvalidToolNameError_js_1.InvalidToolNameError({
                toolName: name,
                namePattern,
            });
        }
        this.name = name;
        this.description = description;
        this.inputSchema = inputSchema;
        this.outputSchema = outputSchema;
        this.execute = execute;
    }
    /**
     * Provdes a structure definition with the name, description and schema of the input.
     * This is used by `useTool`.
     */
    get inputStructureDefinition() {
        return {
            name: this.name,
            description: this.description,
            schema: this.inputSchema,
        };
    }
}
exports.Tool = Tool;
