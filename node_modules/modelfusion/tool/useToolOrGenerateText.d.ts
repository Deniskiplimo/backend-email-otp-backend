import { FunctionOptions } from "../core/FunctionOptions.js";
import { StructureOrTextGenerationModel, StructureOrTextGenerationModelSettings } from "../model-function/generate-structure/StructureOrTextGenerationModel.js";
import { Tool } from "./Tool.js";
type ToolArray<T extends Tool<any, any, any>[]> = T;
type ToToolMap<T extends ToolArray<Tool<any, any, any>[]>> = {
    [K in T[number]["name"]]: Extract<T[number], Tool<K, any, any>>;
};
type ToToolUnion<T> = {
    [KEY in keyof T]: T[KEY] extends Tool<any, infer INPUT, infer OUTPUT> ? {
        tool: KEY;
        parameters: INPUT;
        result: OUTPUT;
        text: string | null;
    } : never;
}[keyof T];
type ToOutputValue<TOOLS extends ToolArray<Tool<any, any, any>[]>> = ToToolUnion<ToToolMap<TOOLS>>;
export declare function useToolOrGenerateText<PROMPT, SETTINGS extends StructureOrTextGenerationModelSettings, TOOLS extends Array<Tool<any, any, any>>>(model: StructureOrTextGenerationModel<PROMPT, SETTINGS>, tools: TOOLS, prompt: PROMPT | ((tools: TOOLS) => PROMPT), options?: FunctionOptions): Promise<{
    tool: null;
    parameters: null;
    result: null;
    text: string;
} | ToOutputValue<TOOLS>>;
export {};
