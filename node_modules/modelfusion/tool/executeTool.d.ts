import { FunctionOptions } from "../core/FunctionOptions.js";
import { Tool } from "./Tool.js";
export type ExecuteToolMetadata = {
    callId: string;
    runId?: string;
    sessionId?: string;
    userId?: string;
    functionId?: string;
    startTimestamp: Date;
    finishTimestamp: Date;
    durationInMs: number;
};
export declare class ExecuteToolPromise<OUTPUT> extends Promise<OUTPUT> {
    private fullPromise;
    private outputPromise;
    constructor(fullPromise: Promise<{
        output: OUTPUT;
        metadata: ExecuteToolMetadata;
    }>);
    asFullResponse(): Promise<{
        output: OUTPUT;
        metadata: ExecuteToolMetadata;
    }>;
    then<TResult1 = OUTPUT, TResult2 = never>(onfulfilled?: ((value: OUTPUT) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | undefined | null): Promise<OUTPUT | TResult>;
    finally(onfinally?: (() => void) | undefined | null): Promise<OUTPUT>;
}
/**
 * `executeTool` directly executes a tool with the given parameters.
 */
export declare function executeTool<TOOL extends Tool<any, any, any>>(tool: TOOL, input: TOOL["inputSchema"]["_type"], options?: FunctionOptions): ExecuteToolPromise<ReturnType<TOOL["execute"]>>;
