diff --git a/node_modules/modelfusion/event-source/EventSourceParserStream.cjs b/node_modules/modelfusion/event-source/EventSourceParserStream.cjs
index def72d7..4733bf8 100644
--- a/node_modules/modelfusion/event-source/EventSourceParserStream.cjs
+++ b/node_modules/modelfusion/event-source/EventSourceParserStream.cjs
@@ -1,34 +1,35 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.EventSourceParserStream = void 0;
-const eventsource_parser_1 = require("eventsource-parser");
-/**
- * A TransformStream that ingests a stream of strings and produces a stream of ParsedEvents.
- *
- * @example
- * ```
- * const eventStream =
- *   response.body
- *     .pipeThrough(new TextDecoderStream())
- *     .pipeThrough(new EventSourceParserStream())
- * ```
- */
-// Copied from https://github.com/rexxars/eventsource-parser/blob/main/src/stream.ts to avoid issues with the commonjs build.
-class EventSourceParserStream extends TransformStream {
+// patched/EventSourceParserStream.js
+const { Transform } = require("stream");
+const { createParser } = require("eventsource-parser");
+
+class EventSourceParserStream extends Transform {
     constructor() {
         let parser;
         super({
-            start(controller) {
-                parser = (0, eventsource_parser_1.createParser)((event) => {
-                    if (event.type === "event") {
-                        controller.enqueue(event);
-                    }
-                });
-            },
-            transform(chunk) {
-                parser.feed(chunk);
-            },
+            readableObjectMode: true,
+            writableObjectMode: false,
+            decodeStrings: false,
         });
+
+        parser = createParser((event) => {
+            if (event.type === "event") {
+                this.push(event);
+            }
+        });
+
+        this.parser = parser;
+    }
+
+    _transform(chunk, encoding, callback) {
+        try {
+            this.parser.feed(chunk.toString());
+        } catch (err) {
+            return callback(err);
+        }
+        callback();
     }
 }
-exports.EventSourceParserStream = EventSourceParserStream;
+
+module.exports = {
+    EventSourceParserStream,
+};
